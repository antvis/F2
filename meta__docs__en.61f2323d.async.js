"use strict";(self.webpackChunk_antv_f2_site=self.webpackChunk_antv_f2_site||[]).push([[9706],{67817:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(7253);var d={}},87349:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(35474);var d={}},24464:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(91060);var d={}},48237:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(95219);var d={}},78669:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(23265);var d={}},55021:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(19421);var d={}},77063:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(63911);var d={}},31340:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(70252);var d={}},69936:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(7253);const d=[{value:"Children",paraId:0,tocIndex:0},{value:"：children 的处理方法",paraId:1,tocIndex:0},{value:"Component",paraId:2,tocIndex:0},{value:"：组件",paraId:1,tocIndex:0},{value:"Canvas",paraId:3,tocIndex:0},{value:"：画布组件",paraId:1,tocIndex:0},{value:"Timeline",paraId:4,tocIndex:0},{value:"：组件事件轴",paraId:1,tocIndex:0},{value:"Chart",paraId:5,tocIndex:0},{value:"：图表组件",paraId:1,tocIndex:0},{value:"提供了用于处理 this.props.children 的方法",paraId:6,tocIndex:1},{value:"类似 Array.map 遍历并返回新的对象",paraId:7,tocIndex:2},{value:"import { Children } from '@antv/f2';\nChildren.map(this.props.children, (child) => {\n  // TODO\n  return child;\n});\n",paraId:8,tocIndex:2},{value:"复制一个新元素",paraId:9,tocIndex:3},{value:"import { Children } from '@antv/f2';\nChildren.map(this.props.children, (child) => {\n  return Children.cloneElement(child, { ... });\n});\n",paraId:10,tocIndex:3},{value:"转换成数组",paraId:11,tocIndex:4},{value:"import { Children } from '@antv/f2';\nconst childrenArray = Children.toArray(children);\n",paraId:12,tocIndex:4},{value:"提供生成 jsx 元素的方法，",paraId:13,tocIndex:5},{value:"createElement(type, props, ...children)",paraId:13,tocIndex:5},{value:" 和 ",paraId:13,tocIndex:5},{value:"jsx(type, props, ...children)",paraId:13,tocIndex:5},{value:" 是完全一致的",paraId:13,tocIndex:5},{value:"import { createElement, Chart } from '@antv/f2';\n// 创建 chart 元素\nconst element = createElement(Chart, { data }, [...]);\n",paraId:14,tocIndex:5},{value:"提供了创建 ref 的方法",paraId:15,tocIndex:6},{value:"import { createRef } from '@antv/f2';\n// 创建 chart 元素\nconst ref = createRef(); // 生成 { current: null } 这样的结构\n",paraId:16,tocIndex:6}]},97648:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(35474);const d=[{value:"坐标系是将两种位置标度结合在一起组成的 2 维定位系统，描述了数据是如何映射到图形所在的平面。",paraId:0},{value:"F2 提供了直角坐标系和极坐标两种类型，目前所有的坐标系均是 2 维的。",paraId:1},{value:"F2 默认提供的坐标系类型为笛卡尔坐标系，当需要切换坐标系时，可以通过调用下面的语法声明需要使用的坐标系：",paraId:2,tocIndex:0},{value:"<Canvas>\n  <Chart\n    coord={{\n      type: coordType,\n    }}\n  ></Chart>\n</Canvas>\n",paraId:3,tocIndex:0},{value:"坐标系类型",paraId:4,tocIndex:0},{value:"说明",paraId:4,tocIndex:0},{value:"rect",paraId:4,tocIndex:0},{value:"直角坐标系，目前仅支持二维，由 x, y 两个互相垂直的坐标轴构成。",paraId:4,tocIndex:0},{value:"polar",paraId:4,tocIndex:0},{value:"极坐标系，由角度和半径 2 个维度构成。",paraId:4,tocIndex:0},{value:"坐标系可以分为笛卡尔坐标系和非笛卡尔坐标系，非笛卡尔坐标系即极坐标，由角度和半径这两个维度来确定位置。",paraId:5,tocIndex:1},{value:"利用极坐标可生成饼图、玫瑰图和雷达图等，较适用于周期性数据的可视化场景，比如时间和方向数据。",paraId:6,tocIndex:1},{value:"坐标系类型的变换会改变几何标记的形状，比如在极坐标系中，矩形将变为圆环的一部分。",paraId:7,tocIndex:1},{value:"例如下图展示的柱状图、层叠柱状图，在不同坐标系下就能变换出各种类型：",paraId:8,tocIndex:1},{value:"直角坐标系",paraId:9,tocIndex:1},{value:"极坐标（未转置）",paraId:9,tocIndex:1},{value:"极坐标（转置）",paraId:9,tocIndex:1},{value:"层叠柱状图",paraId:9,tocIndex:1},{value:"柱状图",paraId:9,tocIndex:1},{value:"<Canvas>\n  <Chart\n    coord={{\n      // 声明直角坐标系\n      type: 'rect',\n      // 坐标系进行转置\n      transposed: true,\n    }}\n  ></Chart>\n</Canvas>\n",paraId:10,tocIndex:2},{value:"<Canvas>\n  <Chart\n    coord={{\n      // 声明极坐标\n      type: 'polar',\n      // 坐标系进行转置\n      startAngle: { Number }, // 起始弧度\n      endAngle: { Number }, // 结束弧度\n      innerRadius: { Number }, // 用于空心部分的半径设置\n      radius: { Number }, // 实心圆的半径大小设置\n      transposed: true, // 极坐标转置\n    }}\n  ></Chart>\n</Canvas>\n",paraId:11,tocIndex:3},{value:"这里需要说明的是，F2 极坐标默认的起始角度和结束角度如下图所示：",paraId:12,tocIndex:3}]},99854:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91060);const d=[{value:"数据是绘制一张图表最基本的部分。F2 基本的数据格式如下：",paraId:0},{value:"const data = [\n  { year: 2010, sales: 40 },\n  { year: 2011, sales: 30 },\n  { year: 2012, sales: 50 },\n  { year: 2013, sales: 60 },\n  { year: 2014, sales: 70 },\n  { year: 2015, sales: 80 },\n  { year: 2016, sales: 80 },\n  { year: 2017, sales: 90 },\n  { year: 2018, sales: 120 },\n];\n",paraId:1},{value:"绘制饼图时，数据集中的每一条记录中",paraId:2,tocIndex:1},{value:"必须包含一个常量字段（并且必须是字符串类型）",paraId:2,tocIndex:1},{value:"，如下所示：",paraId:2,tocIndex:1},{value:"const data = [\n  { name: '芳华', percent: 0.4, a: '1' },\n  { name: '妖猫传', percent: 0.2, a: '1' },\n  { name: '机器之血', percent: 0.18, a: '1' },\n  { name: '心理罪', percent: 0.15, a: '1' },\n  { name: '寻梦环游记', percent: 0.05, a: '1' },\n  { name: '其他', percent: 0.02, a: '1' },\n];\n",paraId:3,tocIndex:1},{value:"详见饼图",paraId:4,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"当 x 轴或者 y 轴的数据为数组时，我们默认会将映射为一段区间，进而绘制为区间柱状图。如下数据格式：",paraId:6,tocIndex:2},{value:"const data = [\n  { x: '分类一', y: [76, 100] },\n  { x: '分类二', y: [56, 108] },\n  { x: '分类三', y: [38, 129] },\n  { x: '分类四', y: [58, 155] },\n  { x: '分类五', y: [45, 120] },\n  { x: '分类六', y: [23, 99] },\n  { x: '分类七', y: [18, 56] },\n  { x: '分类八', y: [18, 34] },\n];\n",paraId:7,tocIndex:2},{value:"详见区间柱状图",paraId:8,tocIndex:2},{value:"示例",paraId:9,tocIndex:2},{value:"。",paraId:8,tocIndex:2}]},5e3:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(95219);const d=[{value:"F2 是基于 ",paraId:0},{value:"CanvasRenderingContext2D",paraId:0},{value:" 的标准接口绘制的，所以只要能提供标准 ",paraId:0},{value:"CanvasRenderingContext2D",paraId:0},{value:" 接口的实现对象，F2 就能进行图表绘制",paraId:0},{value:"因为在小程序中给的 ",paraId:1,tocIndex:0},{value:"context",paraId:1,tocIndex:0},{value:" 对象不是标准的 ",paraId:1,tocIndex:0},{value:"CanvasRenderingContext2D",paraId:1,tocIndex:0},{value:" , 所以封装的核心思路是将 ",paraId:1,tocIndex:0},{value:"context",paraId:1,tocIndex:0},{value:" 和 ",paraId:1,tocIndex:0},{value:"CanvasRenderingContext2D",paraId:1,tocIndex:0},{value:" 对齐，所以 F2 针对支付宝和微信这 2 个常见的场景做了一层 ",paraId:1,tocIndex:0},{value:"context",paraId:1,tocIndex:0},{value:" 的对齐，详情可见: ",paraId:1,tocIndex:0},{value:"https://github.com/antvis/f2-context",paraId:1,tocIndex:0},{value:", 其他小程序也可以按同样的思路封装",paraId:1,tocIndex:0},{value:"为了方便使用， 我们针对支付宝和微信分别分装了对应的自定义组件",paraId:2,tocIndex:1},{value:"F2 的支付宝小程序版本。",paraId:3,tocIndex:2},{value:"github：",paraId:4,tocIndex:2},{value:"https://github.com/antvis/my-f2",paraId:4,tocIndex:2},{value:"使用文档：",paraId:5,tocIndex:2},{value:"这里",paraId:5,tocIndex:2},{value:"F2 的微信小程序图表组件",paraId:6,tocIndex:3},{value:"github：",paraId:7,tocIndex:3},{value:"https://github.com/antvis/wx-f2",paraId:7,tocIndex:3},{value:"使用文档：",paraId:8,tocIndex:3},{value:"这里",paraId:8,tocIndex:3}]},52098:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23265);const d=[{value:"F2 4.0 开始，我们将以声明式编写图表，声明式可以让你的代码更直观和简洁，避免了复杂的 API 调用，而且我们也采用了 JSX 语法，不仅方便使用，还可以很方便地和 React、Vue 这些框架结合",paraId:0,tocIndex:0},{value:"为了构建复杂的可视化图表，组件是一种不可或缺的能力，在 F2 里，我们也参考 React 的设计模式，内置了一套完善的组件能力，能简单方便地分装自己的组件",paraId:1,tocIndex:1},{value:"下面示例是以非 React 为演示的，如果项目已经是 React， 可以参考 ",paraId:2,tocIndex:2},{value:"如何在 React 中使用",paraId:3,tocIndex:2},{value:"因为 F2 也使用了 jsx 语法来构建图表，所以需要使用 ",paraId:4,tocIndex:3},{value:"@babel/plugin-transform-react-jsx",paraId:4,tocIndex:3},{value:" 来编译 jsx",paraId:4,tocIndex:3},{value:"npm install --save-dev @babel/plugin-transform-react-jsx\n",paraId:5,tocIndex:3},{value:'{\n  "plugins": [\n    [\n      "@babel/plugin-transform-react-jsx",\n      {\n        "runtime": "automatic",\n        "importSource": "@antv/f2"\n      }\n    ]\n  ]\n}\n// 或者\n{\n  "plugins": [\n    [\n      "@babel/plugin-transform-react-jsx",\n      {\n        "pragma": "jsx",\n        "pragmaFrag": "Fragment"\n      }\n    ]\n  ]\n}\n',paraId:6,tocIndex:3},{value:"更多可参考",paraId:7,tocIndex:3},{value:"@babel/plugin-transform-react-jsx",paraId:7,tocIndex:3},{value:"如果你是使用 TypeScript, 那么只需在 ",paraId:8,tocIndex:4},{value:"tsconfig.json",paraId:8,tocIndex:4},{value:" 中加入如下配置即可",paraId:8,tocIndex:4},{value:'{\n  "compilerOptions": {\n    "jsxFactory": "jsx",\n    "jsxFragmentFactory": "Fragment"\n  }\n}\n',paraId:9,tocIndex:4},{value:" ",paraId:10,tocIndex:6},{value:"npm install @antv/f2 --save\n",paraId:11,tocIndex:6},{value:"在页面上创建一个 ",paraId:12,tocIndex:8},{value:"<canvas>",paraId:12,tocIndex:8},{value:'<canvas id="myChart" width="400" height="260"></canvas>\n',paraId:13,tocIndex:8},{value:"// F2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 获取 canvas context\nconst context = document.getElementById('myChart').getContext('2d');\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Chart data={data}>\n      <Axis field=\"genre\" />\n      <Axis field=\"sold\" />\n      <Interval x=\"genre\" y=\"sold\" color=\"genre\" />\n      <Tooltip />\n    </Chart>\n  </Canvas>\n);\n\nconst canvas = new Canvas(props);\ncanvas.render();\n",paraId:14,tocIndex:9},{value:"完成上述两步之后，保存文件并用浏览器打开，一张柱状图就绘制成功了：",paraId:15,tocIndex:9},{value:"更多的示例直接查看 ",paraId:16,tocIndex:10},{value:"Demo",paraId:17,tocIndex:10},{value:"。",paraId:16,tocIndex:10}]},35300:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(19421);const d=[{value:"F2 同 G2 一样，基于《The Grammar of Graphics》(Leland Wilkinson 著)一书所提的图形理论。该理论是一套用来描述所有统计图形深层特性的语法规则，该语法回答了『什么是统计图形』这一问题，以自底向上的方式组织最基本的元素形成更高级的元素。",paraId:0,tocIndex:0},{value:"所以对于 F2 来说，",paraId:1,tocIndex:0},{value:"没有具体的图表类型的概念，所有的图表都是通过组合不同的图形语法元素形成的",paraId:1,tocIndex:0},{value:"最基础的部分是你想要可视化的",paraId:2,tocIndex:1},{value:"数据",paraId:3,tocIndex:1},{value:"以及一系列将数据中的变量对应到",paraId:2,tocIndex:1},{value:"绘图属性",paraId:4,tocIndex:1},{value:"的映射；",paraId:2,tocIndex:1},{value:"几何标记",paraId:5,tocIndex:2},{value:"，可以理解为你在图表中实际看到的图形元素，如点、线、多边形等，每个几何标记对象含有多个图形属性，F2 图形语法的核心就是建立数据中的一系列变量到图形属性的映射；",paraId:5,tocIndex:2},{value:"度量",paraId:6,tocIndex:3},{value:"，作为数据空间到图形属性空间的转换桥梁，每一个图形属性都对应着一个或者多个度量；",paraId:7,tocIndex:3},{value:"坐标系",paraId:8,tocIndex:4},{value:"，描述了数据是如何映射到图形所在的平面的，一个几何标记在不同坐标系下会有不同的表现。目前 F2 提供了笛卡尔坐标系、极坐标系两种坐标系；",paraId:9,tocIndex:4},{value:"辅助元素是为了增强图表的可读性和可理解性，F2 中的辅助元素包含坐标轴 Axis、图例 Legend、提示信息 Tooltip、静态辅助标记 Guide。",paraId:10,tocIndex:5},{value:"所以，在 F2 中，我们通常这么描述一张图表：一张图表就是从数据到几何标记对象的图形属性的一个映射，此外图形中还可能包含数据的统计变换，最后绘制在某个特定的坐标系中。",paraId:11,tocIndex:5},{value:"更多内容请阅读以下篇章：",paraId:12,tocIndex:5},{value:"图表组成",paraId:13,tocIndex:5},{value:"数据",paraId:14,tocIndex:5},{value:"度量",paraId:15,tocIndex:5},{value:"几何标记",paraId:16,tocIndex:5},{value:"绘图属性",paraId:17,tocIndex:5},{value:"坐标系",paraId:18,tocIndex:5}]},98443:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63911);const d=[{value:"度量 Scale，是数据空间到图形空间的转换桥梁，负责原始数据到 [0, 1] 区间数值的相互转换工作。针对不同的数据类型对应不同类型的度量。",paraId:0},{value:"根据数据的类型，F2 支持以下几种度量类型：",paraId:1},{value:"identity",paraId:2},{value:"，常量类型的数值，也就是说数据的某个字段是不变的常量；",paraId:2},{value:"linear",paraId:3},{value:"，连续的数字 [1, 2, 3, 4, 5]；",paraId:3},{value:"cat",paraId:4},{value:"，分类, ['男','女']；",paraId:4},{value:"timeCat",paraId:5},{value:"，时间类型；",paraId:5},{value:"在 F2 的使用中，我们可以通过列定义来直接定义度量",paraId:6},{value:"const data = [\n  { a: 'a', b: 20 },\n  { a: 'b', b: 12 },\n  { a: 'c', b: 8 },\n];\n<Canvas>\n  <Chart\n    scale={{\n      a: {\n        type: 'cat', // 声明 a 字段的类型\n      },\n      b: {\n        min: 0, // 手动指定最小值\n        max: 100, // 手动指定最大值\n      },\n    }}\n  ></Chart>\n</Canvas>;\n",paraId:7},{value:"下面列出的是通用的属性：",paraId:8,tocIndex:0},{value:"属性名",paraId:9,tocIndex:0},{value:"类型",paraId:9,tocIndex:0},{value:"说明",paraId:9,tocIndex:0},{value:"type",paraId:9,tocIndex:0},{value:"String",paraId:9,tocIndex:0},{value:"指定不同的度量类型，支持的 type 为 ",paraId:9,tocIndex:0},{value:"identity",paraId:9,tocIndex:0},{value:"、",paraId:9,tocIndex:0},{value:"linear",paraId:9,tocIndex:0},{value:"、",paraId:9,tocIndex:0},{value:"cat",paraId:9,tocIndex:0},{value:"、",paraId:9,tocIndex:0},{value:"timeCat",paraId:9,tocIndex:0},{value:"。",paraId:9,tocIndex:0},{value:"formatter",paraId:9,tocIndex:0},{value:"Function",paraId:9,tocIndex:0},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、提示信息 tooltip 上的显示。",paraId:9,tocIndex:0},{value:"range",paraId:9,tocIndex:0},{value:"Array",paraId:9,tocIndex:0},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:9,tocIndex:0},{value:"alias",paraId:9,tocIndex:0},{value:"String",paraId:9,tocIndex:0},{value:"该数据字段的显示别名，一般用于将字段的英文名称转换成中文名。",paraId:9,tocIndex:0},{value:"tickCount",paraId:9,tocIndex:0},{value:"Number",paraId:9,tocIndex:0},{value:"坐标轴上刻度点的个数，不同的度量类型对应不同的默认值。",paraId:9,tocIndex:0},{value:"ticks",paraId:9,tocIndex:0},{value:"Array",paraId:9,tocIndex:0},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:9,tocIndex:0},{value:"属性名",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"说明",paraId:10,tocIndex:2},{value:"alias",paraId:10,tocIndex:2},{value:"String",paraId:10,tocIndex:2},{value:"别名。",paraId:10,tocIndex:2},{value:"nice",paraId:10,tocIndex:2},{value:"Boolean",paraId:10,tocIndex:2},{value:"默认为 true，用于优化数值范围，使绘制的坐标轴刻度线均匀分布。例如原始数据的范围为 [3, 97]，如果 nice 为 true，那么就会将数值范围调整为 [0, 100]。",paraId:10,tocIndex:2},{value:"min",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"定义数值范围的最小值。",paraId:10,tocIndex:2},{value:"max",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"定义数值范围的最大值。",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:"Array",paraId:10,tocIndex:2},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:10,tocIndex:2},{value:"formatter",paraId:10,tocIndex:2},{value:"Function",paraId:10,tocIndex:2},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示。",paraId:10,tocIndex:2},{value:"ticks",paraId:10,tocIndex:2},{value:"Array",paraId:10,tocIndex:2},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:10,tocIndex:2},{value:"tickCount",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"定义坐标轴刻度线的条数，默认为 5。",paraId:10,tocIndex:2},{value:"tickInterval",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"用于指定坐标轴各个标度点的间距，是原始数据之间的间距差值，",paraId:10,tocIndex:2},{value:"tickCount 和 tickInterval 不可以同时声明。",paraId:10,tocIndex:2},{value:"属性名",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"说明",paraId:11,tocIndex:3},{value:"alias",paraId:11,tocIndex:3},{value:"String",paraId:11,tocIndex:3},{value:"别名。",paraId:11,tocIndex:3},{value:"range",paraId:11,tocIndex:3},{value:"Array",paraId:11,tocIndex:3},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:11,tocIndex:3},{value:"formatter",paraId:11,tocIndex:3},{value:"Function",paraId:11,tocIndex:3},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示。",paraId:11,tocIndex:3},{value:"ticks",paraId:11,tocIndex:3},{value:"Array",paraId:11,tocIndex:3},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:11,tocIndex:3},{value:"tickCount",paraId:11,tocIndex:3},{value:"Number",paraId:11,tocIndex:3},{value:"定义坐标轴刻度线的条数，默认为 5。",paraId:11,tocIndex:3},{value:"values",paraId:11,tocIndex:3},{value:"Array",paraId:11,tocIndex:3},{value:"具体的分类的值，一般用于指定具体的顺序和枚举的对应关系。",paraId:11,tocIndex:3},{value:"isRounding",paraId:11,tocIndex:3},{value:"Boolean",paraId:11,tocIndex:3},{value:"默认值为 ",paraId:11,tocIndex:3},{value:"false",paraId:11,tocIndex:3},{value:", 在计算 ticks 的时候是否允许取整以满足刻度之间的均匀分布，取整后可能会和用户设置的 tickCount 不符合。",paraId:11,tocIndex:3},{value:"values",paraId:12,tocIndex:3},{value:" 属性常用于 2 个场景：",paraId:12,tocIndex:3},{value:"需要制定分类的顺序时，例如：c 字段有'最大','最小'和'适中'3 种类型，我们想指定这些数值在坐标轴或者图例上的显示顺序时：",paraId:13,tocIndex:3},{value:"const scale = {\n  c: {\n    type: 'cat',\n    values: ['最小', '适中', '最大'],\n  },\n};\n",paraId:14,tocIndex:3},{value:"数据字段中的数据是数值类型，但是需要转换成分类类型，",paraId:15,tocIndex:3},{value:"这个时候需要注意原始数据必须是索引值",paraId:15,tocIndex:3},{value:"。",paraId:15,tocIndex:3},{value:"const data = [\n  { month: 0, tem: 7, city: 'Tokyo' },\n  { month: 1, tem: 6.9, city: 'Tokyo' },\n  { month: 2, tem: 9.5, city: 'Tokyo' },\n  { month: 3, tem: 14.5, city: 'Tokyo' },\n  { month: 4, tem: 18.2, city: 'Tokyo' },\n  { month: 5, tem: 21.5, city: 'Tokyo' },\n  { month: 6, tem: 25.2, city: 'Tokyo' },\n];\nconst scale = {\n  month: {\n    type: 'cat',\n    values: ['一月', '二月', '三月', '四月', '五月', '六月', '七月'], // 这时候 month 的原始值是索引值\n  },\n};\n",paraId:16,tocIndex:3},{value:"时间分类类型，",paraId:17,tocIndex:4},{value:"默认会对数据做排序",paraId:17,tocIndex:4},{value:"。",paraId:17,tocIndex:4},{value:"属性名",paraId:18,tocIndex:4},{value:"类型",paraId:18,tocIndex:4},{value:"说明",paraId:18,tocIndex:4},{value:"nice",paraId:18,tocIndex:4},{value:"Boolean",paraId:18,tocIndex:4},{value:"是否将 ticks 进行优化，变更数据的最小值、最大值，使得每个 tick 都是用户易于理解的数据。",paraId:18,tocIndex:4},{value:"mask",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"数据的格式化格式 默认：'YYYY-MM-DD'。",paraId:18,tocIndex:4},{value:"tickCount",paraId:18,tocIndex:4},{value:"Number",paraId:18,tocIndex:4},{value:"坐标点的个数，默认是 5。但不一定是准确值。",paraId:18,tocIndex:4},{value:"values",paraId:18,tocIndex:4},{value:"Array",paraId:18,tocIndex:4},{value:"具体的分类的值，一般用于指定具体的顺序和枚举的对应关系。",paraId:18,tocIndex:4},{value:"alias",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"别名。",paraId:18,tocIndex:4},{value:"range",paraId:18,tocIndex:4},{value:"Array",paraId:18,tocIndex:4},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:18,tocIndex:4},{value:"formatter",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示。",paraId:18,tocIndex:4},{value:"ticks",paraId:18,tocIndex:4},{value:"Array",paraId:18,tocIndex:4},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:18,tocIndex:4},{value:"isRounding",paraId:18,tocIndex:4},{value:"Boolean",paraId:18,tocIndex:4},{value:"默认值为 ",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:", 在计算 ticks 的时候是否允许取整以满足刻度之间的均匀分布，取整后可能会和用户设置的 tickCount 不符合。",paraId:18,tocIndex:4},{value:"注意：",paraId:19,tocIndex:4},{value:"mask",paraId:19,tocIndex:4},{value:" 和 ",paraId:19,tocIndex:4},{value:"formatter",paraId:19,tocIndex:4},{value:" 这两个属性不可共用，如果同时设置了，会根据 ",paraId:19,tocIndex:4},{value:"formatter",paraId:19,tocIndex:4},{value:" 进行格式化，",paraId:19,tocIndex:4},{value:"mask",paraId:19,tocIndex:4},{value:" 属性将不生效。",paraId:19,tocIndex:4},{value:"性能小提示：",paraId:20,tocIndex:4},{value:"当图表的数据源已经过排序，可以通过在列定义中设置 ",paraId:21,tocIndex:4},{value:"sortable: false",paraId:21,tocIndex:4},{value:" 来提升性能，默认情况下，会对 timeCat 类型的度量进行数据排序操作。",paraId:21,tocIndex:4},{value:"const scale = {\n  [fieldName]: {\n    type: 'timeCat',\n    sortable: false,\n  },\n};\n",paraId:22,tocIndex:4}]},81874:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70252);const d=[{value:"为了更好得使用 F2 进行数据可视化，我们需要了解 F2 图表的组成以及相关术语。",paraId:0},{value:"一般情况下，F2 的图表包含坐标轴（Axis）、几何标记（Geometry）、提示信息（Tooltip）、图例（Legend）等，另外还可以包括辅助标记（Guide）、数据标签（dataLabels）等。",paraId:1,tocIndex:0},{value:"F2 基本组成部分如下图所示：",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"术语",paraId:4,tocIndex:1},{value:"英文",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"坐标轴",paraId:4,tocIndex:1},{value:"Axis",paraId:4,tocIndex:1},{value:"每个图表通常包含两个坐标轴，在直角坐标系（笛卡尔坐标系）下，分别为 x 轴和 y 轴，在极坐标轴下，则分别由角度和半径 2 个维度构成。每个坐标轴由坐标轴线（line）、刻度线（tickLine）、刻度文本（label）以及网格线（grid）组成。",paraId:4,tocIndex:1},{value:"图例",paraId:4,tocIndex:1},{value:"Legend",paraId:4,tocIndex:1},{value:"图例作为图表的辅助元素，用于标定不同的数据类型以及数据的范围，用于辅助阅读图表以及帮助用户在图表中进行数据的筛选过滤。",paraId:4,tocIndex:1},{value:"几何标记",paraId:4,tocIndex:1},{value:"Geometry",paraId:4,tocIndex:1},{value:"即我们所说的点、线、面这些几何图形，在图形语法 中几何标记的类型决定了生成图表的类型。也就是数据被可视化后的实际表现，不同的几何标记都包含对应的图形属性。",paraId:4,tocIndex:1},{value:"图形属性",paraId:4,tocIndex:1},{value:"Attribute",paraId:4,tocIndex:1},{value:"图形属性对应视觉编码中的视觉通道，是图形语法元素非常重要和灵活的一部分，不同的几何标记拥有自己的图形属性，F2 提供了位置（position）、颜色（color）、大小（size）、形状（shape）这四种图形属性。",paraId:4,tocIndex:1},{value:"坐标系",paraId:4,tocIndex:1},{value:"Coordinate",paraId:4,tocIndex:1},{value:"坐标系是将两种位置标度结合在一起组成的 2 维定位系统，描述了数据是如何映射到图形所在的平面。",paraId:4,tocIndex:1},{value:"提示信息",paraId:4,tocIndex:1},{value:"Tooltip",paraId:4,tocIndex:1},{value:"当鼠标悬停在某个点上时，会以提示框的形式显示当前点对应的数据的信息，比如该点的值，数据单位等，帮助用户从图表中获取具体的数据信息。",paraId:4,tocIndex:1},{value:"辅助标记",paraId:4,tocIndex:1},{value:"Guide",paraId:4,tocIndex:1},{value:"当需要在图表上绘制一些辅助线、辅助框或者文本时，比如增加预警线、最高值线或者标示明显的范围区域时，辅助标记 Guide 是非常有用的工具。",paraId:4,tocIndex:1}]}}]);