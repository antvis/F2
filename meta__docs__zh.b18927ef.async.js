"use strict";(self.webpackChunk_antv_f2_site=self.webpackChunk_antv_f2_site||[]).push([[9600],{27146:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(1797);var d={}},97820:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(43025);var d={}},52520:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(65973);var d={}},38666:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(87833);var d={}},22168:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(2780);var d={}},67901:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(13371);var d={}},39489:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(33086);var d={}},85621:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(41652);var d={}},28064:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(63702);var d={}},90394:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(55676);var d={}},97137:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(61665);var d={}},75442:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(64737);var d={}},19884:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(87126);var d={}},12304:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(58704);var d={}},45423:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(7039);var d={}},49488:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(88597);var d={}},62988:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(83487);var d={}},29561:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(46020);var d={}},86257:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(59367);var d={}},24035:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(76185);var d={}},83823:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(54204);var d={}},53877:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(63056);var d={}},76161:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(70234);var d={}},92312:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(10864);var d={}},64847:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(85390);var d={}},37460:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(65071);var d={}},33019:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(73246);var d={}},73470:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(82557);var d={}},66962:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(34831);var d={}},61748:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(73679);var d={}},78540:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(23380);var d={}},69534:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(99211);var d={}},947:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(59998);var d={}},88672:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(33647);var d={}},98248:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(46012);var d={}},19573:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(53295);var d={}},51099:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(10417);var d={}},49204:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(92539);var d={}},93058:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(3606);var d={}},8035:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(23395);var d={}},99421:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(50301);var d={}},28302:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(24290);var d={}},4890:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(62216);var d={}},80358:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(83821);var d={}},49265:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(60736),n(65250);var d={}},358:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(1797);const d=[{value:"F2 提供的顶层组件，可以理解成画布对象",paraId:0},{value:"import { Canvas, Component } from '@antv/f2';\n\n<Canvas context={context}>\n  <Component />\n  ...\n</Canvas>;\n",paraId:1,tocIndex:0},{value:"画布的上下文，需要为 ",paraId:2,tocIndex:2},{value:"CanvasRenderingContext2D",paraId:2,tocIndex:2},{value:" 对象，F2 使用的是标准的 ",paraId:2,tocIndex:2},{value:"CanvasRenderingContext2D",paraId:2,tocIndex:2},{value:" 对象接口，只要符合这个接口定义的对象都可以",paraId:2,tocIndex:2},{value:"可选",paraId:3,tocIndex:3},{value:"默认为 ",paraId:4,tocIndex:3},{value:"window.devicePixelRatio",paraId:4,tocIndex:3},{value:"可选",paraId:5,tocIndex:4},{value:"画布宽度",paraId:6,tocIndex:4},{value:"可选",paraId:7,tocIndex:5},{value:"是否执行动画，默认为 ",paraId:8,tocIndex:6},{value:"true",paraId:8,tocIndex:6}]},34409:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(43025);const d=[{value:"用于绘制区域图（面积图）、层叠区域图、区间区域图等, 继承自 ",paraId:0},{value:"几何标记 Geometry",paraId:1},{value:"import { Canvas, Chart, Area } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Area x=\"genre\" y=\"sold\" />\n  </Chart>\n</Canvas>;\n",paraId:2,tocIndex:0},{value:"几何标记统一 Props 详见：",paraId:3,tocIndex:1},{value:"几何标记",paraId:4,tocIndex:1},{value:"是否连接空值， 默认为 ",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"，不连接",paraId:5,tocIndex:2},{value:"几何标记统一方法 详见：",paraId:6,tocIndex:3},{value:"几何标记",paraId:7,tocIndex:3}]},97754:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(65973);const d=[{value:"坐标轴配置。F2 的坐标轴的组成如下：",paraId:0},{value:"术语",paraId:1},{value:"英文",paraId:1},{value:"坐标轴文本",paraId:1},{value:"label",paraId:1},{value:"坐标轴线",paraId:1},{value:"line",paraId:1},{value:"坐标轴刻度线",paraId:1},{value:"tickLine",paraId:1},{value:"坐标轴网格线",paraId:1},{value:"grid",paraId:1},{value:"import { Canvas, Chart, Line, Axis } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Axis field=\"genre\" />\n    <Line x=\"genre\" y=\"sold\" />\n  </Chart>\n</Canvas>;\n",paraId:2,tocIndex:0},{value:"部分属性可参考 scale 图表度量，度量详细介绍可见：",paraId:3,tocIndex:1},{value:"度量",paraId:4,tocIndex:1},{value:"是否显示，默认为 ",paraId:5,tocIndex:2},{value:"true",paraId:5,tocIndex:2},{value:"坐标轴的数据字段",paraId:6,tocIndex:3},{value:"指定不同的度量类型，支持的 type 为 ",paraId:7,tocIndex:4},{value:"identity",paraId:7,tocIndex:4},{value:"、",paraId:7,tocIndex:4},{value:"linear",paraId:7,tocIndex:4},{value:"、",paraId:7,tocIndex:4},{value:"cat",paraId:7,tocIndex:4},{value:"、",paraId:7,tocIndex:4},{value:"timeCat",paraId:7,tocIndex:4},{value:"。",paraId:7,tocIndex:4},{value:"坐标轴显示的位置：",paraId:8,tocIndex:5},{value:"'top' | 'right' | 'bottom' | 'left'",paraId:8,tocIndex:5},{value:"坐标轴上刻度点的个数，不同的度量类型对应不同的默认值",paraId:9,tocIndex:6},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1",paraId:10,tocIndex:7},{value:"自动隐藏重叠的刻度值，保证均匀步长、且保留第一个和最后一个 tick 的前提下，若遮挡则进行隐藏，兜底展示不均匀步长。默认为 ",paraId:11,tocIndex:8},{value:"false",paraId:11,tocIndex:8},{value:"自动旋转刻度值，若坐标轴文本遮挡则进行最小角度旋转。默认为 ",paraId:12,tocIndex:9},{value:"false",paraId:12,tocIndex:9},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、提示信息 tooltip 上的显示。",paraId:13,tocIndex:10},{value:"定义数值范围的最小值。",paraId:14,tocIndex:11},{value:"定义数值范围的最大值。",paraId:15,tocIndex:12},{value:"默认为 true，用于优化数值范围，使绘制的坐标轴刻度线均匀分布。例如原始数据的范围为 [3, 97]，如果 nice 为 true，那么就会将数值范围调整为 [0, 100]。",paraId:16,tocIndex:13},{value:"网格线类型：可选值为：",paraId:17,tocIndex:14},{value:"'arc' | 'line'",paraId:17,tocIndex:14},{value:"坐标轴的样式配置",paraId:18,tocIndex:15},{value:"类型为绘图属性：",paraId:19,tocIndex:16},{value:"文本属性",paraId:20,tocIndex:16},{value:" 文本样式文本样式",paraId:19,tocIndex:16},{value:"{\n  tickLine: {\n    // 刻度线长度\n    length: 10,\n  }\n}\n",paraId:21,tocIndex:17},{value:"类型为绘图属性：",paraId:22,tocIndex:18},{value:"线条属性",paraId:23,tocIndex:18},{value:" 线条样式",paraId:22,tocIndex:18},{value:"轴线样式",paraId:24,tocIndex:18},{value:"类型为绘图属性：",paraId:25,tocIndex:19},{value:"线条属性",paraId:26,tocIndex:19},{value:" 线条样式",paraId:25,tocIndex:19},{value:"网格线样式",paraId:27,tocIndex:19}]},21034:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(87833);const d=[{value:"用于 K 线图, 继承自 ",paraId:0},{value:"几何标记 Geometry",paraId:1},{value:"import { Axis, Candlestick, Canvas, Chart, jsx } from '@antv/f2';\n\nconst data = [\n  {\n    time: '2017-10-24',\n    // 格式为：[open, close, lowest, highest]\n    value: [20, 34, 10, 38],\n  },\n  {\n    time: '2017-10-25',\n    value: [40, 35, 30, 50],\n  },\n  {\n    time: '2017-10-26',\n    value: [31, 38, 33, 44],\n  },\n  {\n    time: '2017-10-27',\n    value: [38, 15, 5, 42],\n  },\n];\n\nconst { props } = (\n  <Canvas context={context}>\n    <Chart data={data}>\n      <Axis field=\"time\" />\n      <Axis field=\"value\" />\n      <Candlestick x=\"time\" y=\"value\" />\n    </Chart>\n  </Canvas>\n);\n",paraId:2,tocIndex:0},{value:"y 轴字段格式为：",paraId:3,tocIndex:1},{value:"[open, close, lowest, highest]",paraId:3,tocIndex:1},{value:" 分别代表：",paraId:3,tocIndex:1},{value:"[开盘价, 收盘价, 最低价, 最高价]",paraId:3,tocIndex:1},{value:"几何标记统一 Props 详见：",paraId:4,tocIndex:2},{value:"几何标记",paraId:5,tocIndex:2},{value:"设置「涨」、「跌」、「平盘」颜色，格式为：",paraId:6,tocIndex:3},{value:"[上涨颜色, 下跌颜色, 平盘颜色]",paraId:6,tocIndex:3},{value:", 默认值为： ",paraId:6,tocIndex:3},{value:"['#E62C3B', '#0E9976', '#999999']",paraId:6,tocIndex:3},{value:"<Candlestick x=\"time\" y=\"value\" color={{ range: ['#E62C3B', '#0E9976', '#999999'] }} />\n",paraId:7,tocIndex:3},{value:"矩形的大小比例，范围 ",paraId:8,tocIndex:4},{value:"[0, 1]",paraId:8,tocIndex:4},{value:", 默认为 ",paraId:8,tocIndex:4},{value:"0.5",paraId:8,tocIndex:4},{value:", 表示矩形的宽度和空白处各占 ",paraId:8,tocIndex:4},{value:"50%",paraId:8,tocIndex:4},{value:'<Candlestick x="time" y="value" sizeRatio={0.8} />\n',paraId:9,tocIndex:4}]},48732:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(2780);const d=[{value:"图表组件",paraId:0},{value:"import { Canvas, Chart, Interval } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Interval x=\"genre\" y=\"sold\" color=\"genre\" />\n  </Chart>\n</Canvas>;\n",paraId:1,tocIndex:0},{value:"可视化数据",paraId:2,tocIndex:2},{value:"图表的度量设置",paraId:3,tocIndex:3},{value:"<Chart\n  data={data}\n  scale={{\n    // 声明 sold 字段配置\n    sold: {\n      min: 0,\n      max: 100,\n    },\n    genre: {\n\n    }\n  }}\n>\n  ...\n</Chart>\n",paraId:4,tocIndex:3},{value:"图表的度量，度量详细介绍可见：",paraId:5,tocIndex:3},{value:"度量",paraId:6,tocIndex:3},{value:"图表的坐标系，坐标系详细介绍可见：",paraId:7,tocIndex:4},{value:"坐标系",paraId:8,tocIndex:4},{value:"<Chart\n  data={data}\n  coord={{\n    type: 'rect' | 'polar',\n    transposed: boolean,\n    // 下面几个是 polar 独有\n    startAngle: number,\n    endAngle: number,\n    radius: number, // 半径\n    innnerRadius: number, // 内半径\n  }}\n>\n  ...\n</Chart>\n",paraId:9,tocIndex:4}]},50627:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(13371);const d=[{value:"F2 基本组成部分如下图所示：",paraId:0},{value:"下列几何标记都继承了下面的属性和方法",paraId:1},{value:"Line",paraId:2},{value:"：线",paraId:3},{value:"Interval",paraId:4},{value:"：柱状图、直方图、饼图、环形图、漏斗图等",paraId:3},{value:"Point",paraId:5},{value:"：点",paraId:3},{value:"Area",paraId:6},{value:"：面积",paraId:3},{value:"x 轴的数据映射字段名",paraId:7,tocIndex:1},{value:"y 轴的数据映射字段名",paraId:8,tocIndex:2},{value:"color 的数据映射字段，可使用如下几种方式",paraId:9,tocIndex:3},{value:'<Geometry color="#1890FF" ... />\n',paraId:10,tocIndex:4},{value:"<Geometry color={ field } ... />\n",paraId:11,tocIndex:5},{value:"F2 会根据数据类型自动选择适应的映射方式",paraId:12,tocIndex:5},{value:"<Geometry color={ [field, ['red', 'green', 'blue']] } ... />\n",paraId:13,tocIndex:6},{value:"F2 会根据数据以此映射 ",paraId:14,tocIndex:6},{value:"['red', 'green', 'blue']",paraId:14,tocIndex:6},{value:" 这 3 种颜色",paraId:14,tocIndex:6},{value:"<Geometry color={{\n  field,\n  range: ['red', 'green', 'blue'],\n  // 也可通过回调的方式设置\n  callback: (value) => { return 'gray' }\n}} ... />\n",paraId:15,tocIndex:7},{value:"F2 支持 ",paraId:16,tocIndex:8},{value:"线性",paraId:16,tocIndex:8},{value:" 和 ",paraId:16,tocIndex:8},{value:"分类",paraId:16,tocIndex:8},{value:" 2 种形式进行数据映射",paraId:16,tocIndex:8},{value:"<Geometry color={{\n  type: 'linear', // 分类为：category\n  field,\n  // 在映射时，颜色会从 red 渐变到 green\n  range: ['red', 'green'],\n}} ... />\n\n<Geometry color={{\n  type: 'category'\n  field,\n  // 不会渐变，只会映射这 3 种颜色\n  range: ['red', 'green', 'blue'],\n}} ... />\n",paraId:17,tocIndex:8},{value:"size 的数据映射字段， 使用方式同 ",paraId:18,tocIndex:9},{value:"color",paraId:19,tocIndex:9},{value:"// 固定值\n<Geometry size={ 4 } ... />\n\n// 字段名映射\n<Geometry size={ field } ... />\n\n// array 形式\n<Geometry size={ [field, [2, 4, 6]] } ... />\n\n// object 形式\n<Geometry size={{\n  field,\n  range: [2, 4, 6],\n  // 也可通过回调的方式设置\n  callback: (value) => { return 'gray' }\n}} ... />\n\n// 指定类型\n<Geometry size={{\n  type: 'linear', // 分类为：category\n  field,\n  // 在映射时，大小会从 2 逐渐变化到 10\n  range: [2, 10],\n}} ... />\n",paraId:20,tocIndex:9},{value:"只显示图表区域内（两轴之间）的，默认 false",paraId:21,tocIndex:10},{value:"设置数据调整方式, F2 支持如下几种数据调整方式",paraId:22,tocIndex:11},{value:"<Geometry adjust={ adjustType } ... />\n",paraId:23,tocIndex:11},{value:"层叠，将同一个分类的数据值累加起来。以层叠的柱状图为例，x 轴方向的同一个分类下面的数据，按照顺序，将 y 轴对应的值累加，最终将数据调整的不再重叠。",paraId:24,tocIndex:12},{value:"分组散开，将同一个分类的数据进行分组在一个范围内均匀分布，例如分组柱状图。",paraId:25,tocIndex:13},{value:"数据对称，使得生成的图形居中对齐，例如河流图、漏斗图。",paraId:26,tocIndex:14},{value:"y 轴是否需要从 0 开始，默认为 ",paraId:27,tocIndex:15},{value:"false",paraId:27,tocIndex:15},{value:"动画配置， F2 支持对动画进行 ",paraId:28,tocIndex:16},{value:"appear",paraId:28,tocIndex:16},{value:", ",paraId:28,tocIndex:16},{value:"update",paraId:28,tocIndex:16},{value:", ",paraId:28,tocIndex:16},{value:"leave",paraId:28,tocIndex:16},{value:" 这 3 个阶段的动画配置",paraId:28,tocIndex:16},{value:"<Geometry\n  animation={{\n    appear: {\n      easing: 'linear',\n      duration: 300,\n      delay: 0,\n      property: ['fillOpacity'],\n      start: {\n        fillOpacity: 0,\n      },\n      end: {\n        fillOpacity: 1,\n      },\n    },\n    update: {\n      easing: 'linear',\n      duration: 450,\n      delay: 0,\n      property: ['x', 'y'],\n    },\n    leave: {\n      easing: 'linear',\n      duration: 450,\n      delay: 0,\n      property: ['fillOpacity'],\n      start: {\n        fillOpacity: 1,\n      },\n      end: {\n        fillOpacity: 0,\n      },\n    },\n  }}\n/>\n",paraId:29,tocIndex:16},{value:"更多缓动函数可见：",paraId:30,tocIndex:16},{value:"easing 函数",paraId:30,tocIndex:16},{value:"， 也可直接传入缓动 ",paraId:30,tocIndex:16},{value:"function",paraId:30,tocIndex:16},{value:"获取 x 轴的 scale",paraId:31,tocIndex:18},{value:"获取 y 轴的 scale",paraId:32,tocIndex:19},{value:"根据 canvas 坐标点获取对应图形的数据, point 为 ",paraId:33,tocIndex:20},{value:"{ x: number, y: number }",paraId:33,tocIndex:20},{value:" 这种结构",paraId:33,tocIndex:20}]},53761:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(33086);const d=[{value:"提示和标注，主要用于在图表上标识额外的标记注解。目前内置 PointGuide 点标注、TextGuide 文本标注、TagGuide 标注、ImageGuide 图片标注、RectGuide 矩形标注 和 LineGuide 线标注，也可以自定义标注。",paraId:0},{value:"点标注 PointGuide",paraId:1},{value:"文本标注 TextGuide",paraId:2},{value:"标签标注 TagGuide",paraId:3},{value:"图片标注 ImageGuide",paraId:4},{value:"矩形标注 RectGuide",paraId:5},{value:"辅助线标注 LineGuide",paraId:6}]},62133:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(41652);const d=[{value:"import { ImageGuide } from '@antv/f2';\n\n<ImageGuide\n  records={[{ genre: 'Sports', sold: 5 }]}\n  src=\"https://example.com/image.png\"\n  attrs={{ width: 24, height: 24 }}\n  offsetX={0}\n  offsetY={0}\n/>;\n",paraId:0,tocIndex:0},{value:"records: Array",paraId:1,tocIndex:1},{value:"\n标注的数据项或比例值",paraId:1,tocIndex:1},{value:"src: string",paraId:1,tocIndex:1},{value:"\n图片地址",paraId:1,tocIndex:1},{value:"attrs",paraId:1,tocIndex:1},{value:"\n图片属性",paraId:1,tocIndex:1},{value:"offsetX: number",paraId:1,tocIndex:1},{value:"\nx 轴偏移量",paraId:1,tocIndex:1},{value:"offsetY: number",paraId:1,tocIndex:1},{value:"\ny 轴偏移量",paraId:1,tocIndex:1}]},45675:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63702);const d=[{value:"import { LineGuide } from '@antv/f2';\n\n<LineGuide\n  records={[{ genre: 'min', sold: 'max' }]}\n  style={{ stroke: '#f00', lineWidth: 2 }}\n  offsetX={0}\n  offsetY={0}\n/>;\n",paraId:0,tocIndex:0},{value:"records: Array",paraId:1,tocIndex:1},{value:"\n标注的数据项或比例值",paraId:1,tocIndex:1},{value:"offsetX: number",paraId:1,tocIndex:1},{value:"\nx 轴偏移量",paraId:1,tocIndex:1},{value:"offsetY: number",paraId:1,tocIndex:1},{value:"\ny 轴偏移量",paraId:1,tocIndex:1},{value:"style",paraId:1,tocIndex:1},{value:"\n线样式",paraId:1,tocIndex:1}]},44005:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(55676);const d=[{value:"import { PointGuide } from '@antv/f2';\n\n<PointGuide\n  records={[{ genre: 'Sports', sold: 5 }]}\n  offsetX={10}\n  offsetY={-10}\n  style={{ fill: '#f00' }}\n/>;\n",paraId:0,tocIndex:0},{value:"records: Array",paraId:1,tocIndex:1},{value:"\n标注的数据项或比例值",paraId:1,tocIndex:1},{value:"offsetX: number",paraId:1,tocIndex:1},{value:"\nx 轴偏移量",paraId:1,tocIndex:1},{value:"offsetY: number",paraId:1,tocIndex:1},{value:"\ny 轴偏移量",paraId:1,tocIndex:1},{value:"style",paraId:1,tocIndex:1},{value:"\n标注样式",paraId:1,tocIndex:1}]},31113:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(61665);const d=[{value:"import { RectGuide } from '@antv/f2';\n\n<RectGuide\n  records={[{ genre: 'min', sold: 'min' }，{ genre: 'max', sold: 'max' }]}\n  style={{ stroke: '#f00', lineWidth: 2 }}\n  offsetX={0}\n  offsetY={0}\n/>;\n",paraId:0,tocIndex:0},{value:"records: Array",paraId:1,tocIndex:1},{value:"\n矩形两个顶点对应的位置",paraId:1,tocIndex:1},{value:"offsetX: number",paraId:1,tocIndex:1},{value:"\nx 轴偏移量",paraId:1,tocIndex:1},{value:"offsetY: number",paraId:1,tocIndex:1},{value:"\ny 轴偏移量",paraId:1,tocIndex:1},{value:"style",paraId:1,tocIndex:1},{value:"\nrect 样式",paraId:1,tocIndex:1}]},80735:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(64737);const d=[{value:"import { TagGuide } from '@antv/f2';\n\n<TagGuide\n  records={[{ genre: 'Sports', sold: 5 }]}\n  content=\"标签内容\"\n  direct=\"tr\"\n  background={{ fill: '#fff' }}\n  textStyle={{ fill: '#000' }}\n/>;\n",paraId:0,tocIndex:0},{value:"records: Array",paraId:1,tocIndex:1},{value:"\n标注的数据项或比例值",paraId:1,tocIndex:1},{value:"content: string",paraId:1,tocIndex:1},{value:"\n文本内容",paraId:1,tocIndex:1},{value:"offsetX: number",paraId:1,tocIndex:1},{value:"\nx 轴偏移量",paraId:1,tocIndex:1},{value:"offsetY: number",paraId:1,tocIndex:1},{value:"\ny 轴偏移量",paraId:1,tocIndex:1},{value:"direct: string",paraId:1,tocIndex:1},{value:"\n可选值：'tl' | 'tc' | 'tr' | 'cl' | 'cr' | 'bl' | 'bc' | 'br'",paraId:1,tocIndex:1},{value:"background: Attrs",paraId:1,tocIndex:1},{value:"\n背景样式",paraId:1,tocIndex:1},{value:"triggerRef: any",paraId:1,tocIndex:1},{value:"\ntagGuide 实例",paraId:1,tocIndex:1},{value:"textStyle: TextAttr",paraId:1,tocIndex:1},{value:"\n文本样式",paraId:1,tocIndex:1}]},93172:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(87126);const d=[{value:"import { TextGuide } from '@antv/f2';\n\n<TextGuide\n  records={[{ genre: 'Sports', sold: 5 }]}\n  content=\"文本内容\"\n  offsetX={-15}\n  offsetY={-20}\n  style={{ fill: '#000', fontSize: '24px' }}\n/>;\n",paraId:0,tocIndex:0},{value:"records: Array",paraId:1,tocIndex:1},{value:"\n标注的数据项或比例值",paraId:1,tocIndex:1},{value:"content: string",paraId:1,tocIndex:1},{value:"\n文本内容",paraId:1,tocIndex:1},{value:"offsetX: number",paraId:1,tocIndex:1},{value:"\nx 轴偏移量",paraId:1,tocIndex:1},{value:"offsetY: number",paraId:1,tocIndex:1},{value:"\ny 轴偏移量",paraId:1,tocIndex:1},{value:"style",paraId:1,tocIndex:1},{value:"\n文本样式",paraId:1,tocIndex:1}]},42790:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(58704);const d=[{value:"用于绘制柱状图、直方图、南丁格尔玫瑰图、饼图、条形环图（玉缺图）、漏斗图等, 继承自 ",paraId:0},{value:"几何标记 Geometry",paraId:1},{value:"import { Canvas, Chart, Interval } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Interval x=\"genre\" y=\"sold\" color=\"genre\" />\n  </Chart>\n</Canvas>;\n",paraId:2,tocIndex:0},{value:"几何标记统一 Props 详见：",paraId:3,tocIndex:1},{value:"几何标记",paraId:4,tocIndex:1},{value:"选中交互配置",paraId:5,tocIndex:2},{value:"设置单选/多选， 默认为 ",paraId:6,tocIndex:3},{value:"single",paraId:6,tocIndex:3},{value:"（单选），可选值： ",paraId:6,tocIndex:3},{value:"'single' | 'multiple'",paraId:6,tocIndex:3},{value:"触发的事件，默认为 ",paraId:7,tocIndex:4},{value:"click",paraId:7,tocIndex:4},{value:"，可选 ",paraId:7,tocIndex:4},{value:"'click' | 'press'",paraId:7,tocIndex:4},{value:"设置 press 时，需要把 cancelable 设置成 false, 否则会有明显的闪动",paraId:8,tocIndex:4},{value:"默认的选中项，可设置多个",paraId:9,tocIndex:5},{value:"<Interval selection={{ defaultSelected: [{ genre: 'Sports', sold: 5 }] }} />\n",paraId:10,tocIndex:5},{value:"选中的样式，可设置图形属性或者函数",paraId:11,tocIndex:6},{value:"<Interval selection={{ selectedStyle: { fillOpacity: 1 } }} />\n",paraId:12,tocIndex:6},{value:"或者",paraId:13,tocIndex:6},{value:"<Interval\n  selection={{\n    selectedStyle: (record) => {\n      return { fillOpacity: 1 };\n    },\n  }}\n/>\n",paraId:14,tocIndex:6},{value:"非选中的样式，可设置图形属性或者函数， 同 selectedStyle",paraId:15,tocIndex:7},{value:"<Interval selection={{ unSelectedStyle: { fillOpacity: 0.4 } }} />\n",paraId:16,tocIndex:7},{value:"或者",paraId:17,tocIndex:7},{value:"<Interval\n  selection={{\n    unSelectedStyle: (record) => {\n      return { fillOpacity: 0.4 };\n    },\n  }}\n/>\n",paraId:18,tocIndex:7},{value:"是否可取消，单选下表现为选择和反选，默认为 ",paraId:19,tocIndex:8},{value:"true",paraId:19,tocIndex:8},{value:"<Interval selection={{ cancelable: false }} />\n",paraId:20,tocIndex:8},{value:"柱状图选中",paraId:21,tocIndex:9},{value:"饼图选中",paraId:22,tocIndex:9},{value:"大小比例，范围 ",paraId:23,tocIndex:10},{value:"[0, 1]",paraId:23,tocIndex:10},{value:", 比如柱状图默认为 ",paraId:23,tocIndex:10},{value:"0.5",paraId:23,tocIndex:10},{value:", 表示柱子和空白处各占 ",paraId:23,tocIndex:10},{value:"50%",paraId:23,tocIndex:10},{value:"几何标记统一方法 详见：",paraId:24,tocIndex:11},{value:"几何标记",paraId:25,tocIndex:11}]},99223:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(7039);const d=[{value:"F2 图例的生成是由图形语法中的图形属性决定的，我们会根据图形属性映射以及数据的类型自动生成不同类型的图例：color, size 这两个图形属性如果判断接收的参数是数据源的字段时，会自动生成不同的图例：",paraId:0},{value:"color，会赋予不同的图例项不同的颜色来区分图形，如果该字段是分类类型，则会生成离散图例",paraId:1},{value:"import { Canvas, Chart, Line, Legend } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Legend position=\"top\">\n    <Axis field=\"genre\" />\n    <Line x=\"genre\" y=\"sold\" />\n  </Chart>\n</Canvas>;\n",paraId:2,tocIndex:0},{value:"可选值为：",paraId:3,tocIndex:2},{value:"'uniform' | 'adaptive'",paraId:3,tocIndex:2},{value:" , 默认为 ",paraId:3,tocIndex:2},{value:"'uniform'",paraId:3,tocIndex:2},{value:"可选值为：",paraId:4,tocIndex:3},{value:"'top' | 'right' | 'bottom' | 'left'",paraId:4,tocIndex:3},{value:", 默认为 ",paraId:4,tocIndex:3},{value:"'top'",paraId:4,tocIndex:3},{value:"图例显示的宽度",paraId:5,tocIndex:4},{value:"图例显示的高度",paraId:6,tocIndex:5},{value:"格式化图例每项的文本显示",paraId:7,tocIndex:6},{value:"图例标记, 可选值为： ",paraId:8,tocIndex:7},{value:"'circle' | 'square' | 'line'",paraId:8,tocIndex:7},{value:", 默认为 ",paraId:8,tocIndex:7},{value:"'circle'",paraId:8,tocIndex:7},{value:"定义 Legend 的布局方式",paraId:9,tocIndex:8},{value:"属性名",paraId:10,tocIndex:8},{value:"类型",paraId:10,tocIndex:8},{value:"描述",paraId:10,tocIndex:8},{value:"flexDirection",paraId:10,tocIndex:8},{value:"String",paraId:10,tocIndex:8},{value:"支持的属性：'column', 'row'",paraId:10,tocIndex:8},{value:"justifyContent",paraId:10,tocIndex:8},{value:"String",paraId:10,tocIndex:8},{value:"支持的属性：'flex-start', 'center', 'flex-end', 'space-between', 'space-around'",paraId:10,tocIndex:8},{value:"alignItems",paraId:10,tocIndex:8},{value:"String",paraId:10,tocIndex:8},{value:"支持的属性： 'flex-start', 'center', 'flex-end', 'stretch'",paraId:10,tocIndex:8},{value:"alignSelf",paraId:10,tocIndex:8},{value:"String",paraId:10,tocIndex:8},{value:"支持的属性： 'flex-start', 'center', 'flex-end', 'stretch'",paraId:10,tocIndex:8},{value:"flexWrap",paraId:10,tocIndex:8},{value:"String",paraId:10,tocIndex:8},{value:"支持的属性：'wrap', 'nowrap'",paraId:10,tocIndex:8},{value:"<Legend\n  style={{\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n  }}\n/>\n",paraId:11,tocIndex:8},{value:"定义每个图例项的布局方式，支持的属性同上文的 style",paraId:12,tocIndex:9},{value:"<Legend\n  itemStyle={{\n    justifyContent: 'center',\n  }}\n/>\n",paraId:13,tocIndex:9},{value:"类型为绘图属性：",paraId:14,tocIndex:10},{value:"文本属性",paraId:15,tocIndex:10},{value:"图例名称样式",paraId:16,tocIndex:10},{value:"<Legend\n  nameStyle={{\n    fontSize: '20px',\n    fill: '#000',\n  }}\n/>\n",paraId:17,tocIndex:10},{value:"类型为绘图属性：",paraId:18,tocIndex:11},{value:"文本属性",paraId:19,tocIndex:11},{value:"图例值样式",paraId:20,tocIndex:11},{value:"<Legend\n  valueStyle={{\n    fontSize: '20px',\n    fill: '#000',\n  }}\n/>\n",paraId:21,tocIndex:11},{value:"是否支持点击，默认为 true",paraId:22,tocIndex:12},{value:"item 点击的回调",paraId:23,tocIndex:13},{value:"<Legend\n  onClick={(item) => {\n    console.log(item); // => { field: 'genre', color: '#1890FF', name: 'Sports'}\n  }}\n/>\n",paraId:24,tocIndex:13},{value:"获取图表中原始分类数据",paraId:25,tocIndex:15},{value:"获取 legendShape 包围盒",paraId:26,tocIndex:16}]},93390:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(88597);const d=[{value:"图表里面的折线类型, 用于绘制折线图、曲线图、阶梯线图等, 继承自 ",paraId:0},{value:"几何标记 Geometry",paraId:1},{value:"import { Canvas, Chart, Line } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Line x=\"genre\" y=\"sold\" />\n  </Chart>\n</Canvas>;\n",paraId:2,tocIndex:0},{value:"几何标记统一 Props 详见：",paraId:3,tocIndex:1},{value:"几何标记",paraId:4,tocIndex:1},{value:"是否连接空值， 默认为 ",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"，不连接",paraId:5,tocIndex:2},{value:"几何标记统一方法 详见：",paraId:6,tocIndex:3},{value:"几何标记",paraId:7,tocIndex:3}]},5392:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(83487);const d=[{value:"放大镜组件用于在图表上提供局部放大功能，帮助用户更清晰地查看数据细节。",paraId:0},{value:"数据点过于密集，需要查看局部细节",paraId:1,tocIndex:0},{value:"需要放大特定区域进行详细分析",paraId:1,tocIndex:0},{value:"import { jsx, Canvas, Chart, Line, Magnifier } from '@antv/f2';\n\nconst context = document.getElementById('container').getContext('2d');\nconst data = [\n  { date: '2024-01-01', value: 10 },\n  { date: '2024-01-02', value: 15 },\n  { date: '2024-01-03', value: 8 },\n  { date: '2024-01-04', value: 25 },\n  { date: '2024-01-05', value: 30 },\n  { date: '2024-01-06', value: 28 },\n  { date: '2024-01-07', value: 35 },\n];\n\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Chart data={data}>\n      <Line x=\"date\" y=\"value\" />\n      <Magnifier show={true} x={200} y={150} width={100} height={80} scale={2} />\n    </Chart>\n  </Canvas>\n);\n\nconst chart = new Canvas(props);\nchart.render();\n",paraId:2,tocIndex:1},{value:"部分属性可参考 scale 图表度量，度量详细介绍可见：",paraId:3,tocIndex:2},{value:"度量",paraId:4,tocIndex:2},{value:"是否显示放大镜，默认为 ",paraId:5,tocIndex:3},{value:"false",paraId:5,tocIndex:3},{value:"放大镜中心点的 x 坐标，默认为 ",paraId:6,tocIndex:4},{value:"0",paraId:6,tocIndex:4},{value:"放大镜中心点的 y 坐标，默认为 ",paraId:7,tocIndex:5},{value:"0",paraId:7,tocIndex:5},{value:"放大镜的宽度，默认为 ",paraId:8,tocIndex:6},{value:"100",paraId:8,tocIndex:6},{value:"放大镜的高度，默认为 ",paraId:9,tocIndex:7},{value:"80",paraId:9,tocIndex:7},{value:"放大倍数，默认为 ",paraId:10,tocIndex:8},{value:"2",paraId:10,tocIndex:8},{value:"放大镜圆角半径，默认为 ",paraId:11,tocIndex:9},{value:"10",paraId:11,tocIndex:9},{value:"边框宽度，默认为 ",paraId:12,tocIndex:10},{value:"1",paraId:12,tocIndex:10},{value:"边框颜色，默认为 ",paraId:13,tocIndex:11},{value:"#e8e8e8",paraId:13,tocIndex:11},{value:"背景颜色，默认为 ",paraId:14,tocIndex:12},{value:"rgba(255, 255, 255, 0.9)",paraId:14,tocIndex:12},{value:"阴影模糊程度，默认为 ",paraId:15,tocIndex:13},{value:"10",paraId:15,tocIndex:13},{value:"阴影颜色，默认为 ",paraId:16,tocIndex:14},{value:"rgba(0, 0, 0, 0.3)",paraId:16,tocIndex:14},{value:"是否显示，默认为 ",paraId:17,tocIndex:15},{value:"true",paraId:17,tocIndex:15},{value:"数据字段名",paraId:18,tocIndex:16},{value:"可通过获取 ref 调用",paraId:19,tocIndex:17},{value:"在指定坐标显示放大镜",paraId:20,tocIndex:18},{value:"隐藏放大镜",paraId:21,tocIndex:19},{value:"更新放大镜位置",paraId:22,tocIndex:20},{value:"更新放大倍数",paraId:23,tocIndex:21},{value:"<Magnifier show={true} x={200} y={150} />\n",paraId:24,tocIndex:23},{value:'<Magnifier\n  show={true}\n  x={200}\n  y={150}\n  width={120}\n  height={100}\n  scale={3}\n  borderColor="#1890ff"\n  backgroundColor="rgba(255, 255, 255, 0.95)"\n  radius={20}\n/>\n',paraId:25,tocIndex:24},{value:"const [showMagnifier, setShowMagnifier] = useState(false);\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\n// 在图表点击时显示放大镜\nconst handleChartClick = (ev) => {\n  setPosition({ x: ev.x, y: ev.y });\n  setShowMagnifier(true);\n};\n\n<Magnifier show={showMagnifier} x={position.x} y={position.y} scale={2.5} />;\n",paraId:26,tocIndex:25},{value:"检查 ",paraId:27,tocIndex:27},{value:"show",paraId:27,tocIndex:27},{value:" 属性是否为 ",paraId:27,tocIndex:27},{value:"true",paraId:27,tocIndex:27},{value:"确认 ",paraId:27,tocIndex:27},{value:"x",paraId:27,tocIndex:27},{value:" 和 ",paraId:27,tocIndex:27},{value:"y",paraId:27,tocIndex:27},{value:" 坐标是否在图表范围内",paraId:27,tocIndex:27},{value:"检查 ",paraId:27,tocIndex:27},{value:"visible",paraId:27,tocIndex:27},{value:" 属性是否为 ",paraId:27,tocIndex:27},{value:"true",paraId:27,tocIndex:27}]},59021:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46020);const d=[{value:"饼图标签组件用于在饼图上显示数据标签，支持两种布局方式：默认布局和蜘蛛网布局，提供灵活的标签定位和样式自定义功能。",paraId:0},{value:"需要在饼图上显示详细的数据标签",paraId:1,tocIndex:0},{value:"数据标签需要避免重叠，提供清晰的视觉引导",paraId:1,tocIndex:0},{value:"import { jsx, Canvas, Chart, Pie, PieLabel } from '@antv/f2';\n\nconst context = document.getElementById('container').getContext('2d');\nconst data = [\n  { name: '餐饮', value: 20 },\n  { name: '交通', value: 15 },\n  { name: '购物', value: 25 },\n  { name: '娱乐', value: 30 },\n  { name: '其他', value: 10 },\n];\n\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Chart data={data}>\n      <Pie x=\"name\" y=\"value\" radius={0.8} innerRadius={0.5} />\n      <PieLabel\n        label1={(data) => ({ text: data.name })}\n        label2={(data) => ({\n          text: data.value + '%',\n          fontWeight: 500,\n        })}\n      />\n    </Chart>\n  </Canvas>\n);\n\nconst chart = new Canvas(props);\nchart.render();\n",paraId:2,tocIndex:1},{value:"标签布局类型，默认为 ",paraId:3,tocIndex:3},{value:"'default'",paraId:3,tocIndex:3},{value:"default",paraId:4,tocIndex:3},{value:": 默认布局，使用曲线连接线，标签分布在左右两侧",paraId:4,tocIndex:3},{value:"spider",paraId:4,tocIndex:3},{value:": 蜘蛛网布局，使用直线连接线，标签呈放射状分布，推荐该布局",paraId:4,tocIndex:3},{value:"锚点的偏移量，即标签线与饼图扇形的连接点距离，默认为 ",paraId:5,tocIndex:4},{value:"'10px'",paraId:5,tocIndex:4},{value:"拐点的偏移量，即标签线的拐点距离，默认为 ",paraId:6,tocIndex:5},{value:"'30px'",paraId:6,tocIndex:5},{value:"文本距离画布四边的距离，默认为 ",paraId:7,tocIndex:6},{value:"'15px'",paraId:7,tocIndex:6},{value:"第一行标签配置，接收数据项作为参数，返回标签配置对象",paraId:8,tocIndex:7},{value:"label1={(data) => ({\n  text: data.name,\n  fill: '#808080',\n  fontSize: 12,\n  textAlign: 'start'\n})}\n",paraId:9,tocIndex:7},{value:"第二行标签配置，接收数据项作为参数，返回标签配置对象",paraId:10,tocIndex:8},{value:"label2={(data) => ({\n  text: '￥' + data.value.toLocaleString(),\n  fill: '#000000',\n  fontSize: 14,\n  fontWeight: 500,\n  textAlign: 'start'\n})}\n",paraId:11,tocIndex:8},{value:"指定要显示的数据记录，用于自定义显示特定数据项的标签",paraId:12,tocIndex:9},{value:"records={[\n  { name: '餐饮', value: 20 },\n  { name: '交通', value: 15 }\n]}\n",paraId:13,tocIndex:9},{value:"触发的事件类型，默认为 ",paraId:14,tocIndex:10},{value:"'click'",paraId:14,tocIndex:10},{value:"标签点击事件回调函数，接收事件对象作为参数",paraId:15,tocIndex:11},{value:"onClick={(data) => {\n  console.log('点击了标签:', data);\n}}\n",paraId:16,tocIndex:11},{value:"调整高度的阈值比例，默认为 ",paraId:17,tocIndex:12},{value:"1",paraId:17,tocIndex:12},{value:"标签配置对象支持以下属性：",paraId:18,tocIndex:13},{value:"属性名",paraId:19,tocIndex:13},{value:"类型",paraId:19,tocIndex:13},{value:"描述",paraId:19,tocIndex:13},{value:"text",paraId:19,tocIndex:13},{value:"string",paraId:19,tocIndex:13},{value:"标签文本内容",paraId:19,tocIndex:13},{value:"fill",paraId:19,tocIndex:13},{value:"string",paraId:19,tocIndex:13},{value:"文本颜色",paraId:19,tocIndex:13},{value:"fontSize",paraId:19,tocIndex:13},{value:"number",paraId:19,tocIndex:13},{value:"字体大小",paraId:19,tocIndex:13},{value:"fontWeight",paraId:19,tocIndex:13},{value:"number | string",paraId:19,tocIndex:13},{value:"字体粗细",paraId:19,tocIndex:13},{value:"textAlign",paraId:19,tocIndex:13},{value:"'start' | 'center' | 'end'",paraId:19,tocIndex:13},{value:"文本对齐方式",paraId:19,tocIndex:13},{value:"textBaseline",paraId:19,tocIndex:13},{value:"'top' | 'middle' | 'bottom'",paraId:19,tocIndex:13},{value:"文本基线对齐方式",paraId:19,tocIndex:13},{value:"<PieLabel\n  type=\"default\"\n  label1={(data) => ({ text: data.name })}\n  label2={(data) => ({ text: data.value + '%' })}\n/>\n",paraId:20,tocIndex:15},{value:"蜘蛛网布局适用于数据较多或需要更紧凑布局的场景：",paraId:21,tocIndex:16},{value:"<PieLabel\n  type=\"spider\"\n  anchorOffset=\"15px\"\n  inflectionOffset=\"40px\"\n  label1={(data) => ({\n    text: data.name,\n    fill: '#666',\n  })}\n  label2={(data) => ({\n    text: '￥' + data.value.toLocaleString(),\n    fill: '#000',\n    fontWeight: 500,\n  })}\n/>\n",paraId:22,tocIndex:16},{value:'<Chart data={data}>\n  <Pie x="name" y="value" />\n  <PieLabel label1={(data) => ({ text: data.name })} label2={(data) => ({ text: data.value })} />\n</Chart>\n',paraId:23,tocIndex:18},{value:'<Chart data={data}>\n  <Pie x="name" y="value" />\n  <PieLabel\n    type="spider"\n    anchorOffset="20px"\n    inflectionOffset="50px"\n    sidePadding="20px"\n    label1={(data) => ({\n      text: data.name,\n      fill: \'#1890ff\',\n      fontSize: 14,\n      fontWeight: 500,\n    })}\n    label2={(data) => ({\n      text: data.value + \' (\' + ((data.value / total) * 100).toFixed(1) + \'%)\',\n      fill: \'#666\',\n      fontSize: 12,\n    })}\n  />\n</Chart>\n',paraId:24,tocIndex:19},{value:"const [selected, setSelected] = useState(null);\n\n<Chart data={data}>\n  <Pie x=\"name\" y=\"value\" />\n  <PieLabel\n    label1={(data) => ({\n      text: data.name,\n      fill: selected === data.name ? '#1890ff' : '#666',\n    })}\n    label2={(data) => ({\n      text: data.value,\n      fill: selected === data.name ? '#1890ff' : '#000',\n      fontWeight: selected === data.name ? 600 : 400,\n    })}\n    onClick={(data) => setSelected(data.name)}\n  />\n</Chart>;\n",paraId:25,tocIndex:20},{value:'<Chart data={allData}>\n  <Pie x="name" y="value" />\n  <PieLabel\n    type="spider"\n    records={allData.filter((d) => d.value > 10)} // 只显示值大于10的标签\n    label1={(data) => ({ text: data.name })}\n    label2={(data) => ({ text: data.value + \'%\' })}\n  />\n</Chart>\n',paraId:26,tocIndex:21},{value:"调整 ",paraId:27,tocIndex:23},{value:"sidePadding",paraId:27,tocIndex:23},{value:" 属性增加边距",paraId:27,tocIndex:23},{value:"使用 ",paraId:27,tocIndex:23},{value:'type="spider"',paraId:27,tocIndex:23},{value:" 蜘蛛网布局获得更好的空间利用",paraId:27,tocIndex:23},{value:"减少显示的标签数量，使用 ",paraId:27,tocIndex:23},{value:"records",paraId:27,tocIndex:23},{value:" 属性筛选重要数据",paraId:27,tocIndex:23},{value:"调整 ",paraId:28,tocIndex:24},{value:"anchorOffset",paraId:28,tocIndex:24},{value:" 和 ",paraId:28,tocIndex:24},{value:"inflectionOffset",paraId:28,tocIndex:24},{value:" 改变连接线长度",paraId:28,tocIndex:24},{value:"检查数据是否有异常值导致标签位置计算错误",paraId:28,tocIndex:24},{value:"确保饼图有足够的空间显示标签",paraId:28,tocIndex:24},{value:"确认 ",paraId:29,tocIndex:25},{value:"triggerOn",paraId:29,tocIndex:25},{value:" 属性设置正确（'click' 或 'press'）",paraId:29,tocIndex:25},{value:"检查是否有其他元素遮挡了标签",paraId:29,tocIndex:25},{value:"验证 ",paraId:29,tocIndex:25},{value:"onClick",paraId:29,tocIndex:25},{value:" 回调函数是否正确绑定",paraId:29,tocIndex:25}]},21342:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59367);const d=[{value:"用于绘制点图、折线图中的点等, 继承自 ",paraId:0},{value:"几何标记 Geometry",paraId:1},{value:"import { Canvas, Chart, Point } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Point x=\"genre\" y=\"sold\" />\n  </Chart>\n</Canvas>;\n",paraId:2,tocIndex:0},{value:"几何标记统一 Props 详见：",paraId:3,tocIndex:1},{value:"几何标记",paraId:4,tocIndex:1},{value:"几何标记统一方法 详见：",paraId:5,tocIndex:2},{value:"几何标记",paraId:6,tocIndex:2}]},32400:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(76185);const d=[{value:"数据滚动和缩放",paraId:0},{value:"import { Canvas, Chart, Line, ScrollBar } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Axis field=\"genre\" />\n    <Line x=\"genre\" y=\"sold\" />\n    <ScrollBar />\n  </Chart>\n</Canvas>;\n",paraId:1,tocIndex:0},{value:"滚动模式，默认为： ",paraId:2,tocIndex:2},{value:"'x'",paraId:2,tocIndex:2},{value:", 可选值： ",paraId:2,tocIndex:2},{value:"'x' | 'y' | '['x', 'y']'",paraId:2,tocIndex:2},{value:"初始化区间， 默认为： ",paraId:3,tocIndex:3},{value:"[0, 1]",paraId:3,tocIndex:3},{value:"，数值为 ",paraId:3,tocIndex:3},{value:"0 ~ 1",paraId:3,tocIndex:3},{value:" 之间",paraId:3,tocIndex:3},{value:"是否支持平移，默认为： ",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:"是否支持缩放，默认为： ",paraId:5,tocIndex:5},{value:"true",paraId:5,tocIndex:5},{value:"自动同步 x/y 的坐标值，默认为：",paraId:6,tocIndex:6},{value:"false",paraId:6,tocIndex:6},{value:"是否显示滚动条",paraId:7,tocIndex:7},{value:"默认为 ",paraId:8,tocIndex:8},{value:"'bottom'",paraId:8,tocIndex:8},{value:", 可选值为：",paraId:8,tocIndex:8},{value:"'top' | 'right' | 'bottom' | 'left'",paraId:8,tocIndex:8},{value:"滚动条和图表内容间距，比如",paraId:9,tocIndex:9},{value:"marign: ['10px', '20px']\nmarignTop: '10px'\n",paraId:10,tocIndex:9},{value:"滚动条背景样式",paraId:11,tocIndex:10},{value:"类型为绘图属性：",paraId:12,tocIndex:10},{value:"线条属性",paraId:13,tocIndex:10},{value:" 线条样式",paraId:12,tocIndex:10},{value:"滑块样式",paraId:14,tocIndex:11},{value:"类型为绘图属性：",paraId:15,tocIndex:11},{value:"线条属性",paraId:16,tocIndex:11},{value:" 线条样式",paraId:15,tocIndex:11},{value:"折线图平移",paraId:17,tocIndex:12},{value:"柱状图平移",paraId:18,tocIndex:12},{value:"散点图缩放平移",paraId:19,tocIndex:12}]},21484:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(54204);const d=[{value:"import { Canvas, Chart, Line, Tooltip } from '@antv/f2';\nconst data = [\n  { genre: 'Sports', sold: 5 },\n  { genre: 'Strategy', sold: 10 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 20 },\n  { genre: 'Other', sold: 40 },\n];\n\n<Canvas context={context}>\n  <Chart data={data}>\n    <Tooltip>\n    <Axis field=\"genre\" />\n    <Line x=\"genre\" y=\"sold\" />\n  </Chart>\n</Canvas>;\n",paraId:0,tocIndex:0},{value:"边距",paraId:1,tocIndex:3},{value:"触发 tooltip 显示事件，默认为 press",paraId:2,tocIndex:4},{value:"触发 tooltip 消失事件，默认为 pressend",paraId:3,tocIndex:5},{value:"是否一直显示",paraId:4,tocIndex:6},{value:"是否显示十字线",paraId:5,tocIndex:7},{value:"十字线类型",paraId:6,tocIndex:8},{value:"类型为绘图属性：",paraId:7,tocIndex:9},{value:"线条属性",paraId:8,tocIndex:9},{value:"十字线样式",paraId:9,tocIndex:9},{value:"类型为绘图属性：",paraId:10,tocIndex:10},{value:"文本属性",paraId:11,tocIndex:10},{value:"主体名称样式",paraId:12,tocIndex:10},{value:"类型为绘图属性：",paraId:13,tocIndex:11},{value:"文本属性",paraId:14,tocIndex:11},{value:"主体值样式",paraId:15,tocIndex:11},{value:"类型为绘图属性：",paraId:16,tocIndex:12},{value:"通用属性",paraId:17,tocIndex:12},{value:"主体背景样式",paraId:18,tocIndex:12},{value:"xTip 中显示的 text 定义",paraId:19,tocIndex:13},{value:"类型为绘图属性：",paraId:20,tocIndex:14},{value:"文本属性",paraId:21,tocIndex:14},{value:"xTip 中字体样式",paraId:22,tocIndex:14},{value:"类型为绘图属性：",paraId:23,tocIndex:15},{value:"通用属性",paraId:24,tocIndex:15},{value:"xTip 中背景样式",paraId:25,tocIndex:15},{value:"是否显示",paraId:26,tocIndex:16},{value:"tooltip 选中数据发生改变时的回调函数",paraId:27,tocIndex:17},{value:"可通过获取 ref 调用",paraId:28,tocIndex:18},{value:"在 x，y 处显示 tooltip 组件",paraId:29,tocIndex:19},{value:"隐藏 tooltip 组件",paraId:30,tocIndex:20}]},68142:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63056);const d=[{value:"提供了组件定义",paraId:0},{value:"import { Component } from '@antv/f2';\n// TODO\n",paraId:1,tocIndex:0},{value:"构造函数，传入组件参数",paraId:2,tocIndex:2},{value:"在组件将要挂载阶段执行",paraId:3,tocIndex:3},{value:"在组件渲染阶段执行",paraId:4,tocIndex:4},{value:"在组件完成挂载后执行",paraId:5,tocIndex:5},{value:"在组件触发更新前触发，",paraId:6,tocIndex:6},{value:"return false",paraId:6,tocIndex:6},{value:" 时，不会触发组件更新",paraId:6,tocIndex:6},{value:"在更新组件前，接收 props 时触发",paraId:7,tocIndex:7},{value:"组件更新前执行",paraId:8,tocIndex:8},{value:"完成更新后执行",paraId:9,tocIndex:9},{value:"完成销毁后执行",paraId:10,tocIndex:10},{value:"组件状态修改",paraId:11,tocIndex:11},{value:"触发强制更新",paraId:12,tocIndex:12},{value:"组件渲染时是否需要执行动画",paraId:13,tocIndex:13},{value:"构造函数传入的属性",paraId:14,tocIndex:15},{value:"组件状态",paraId:15,tocIndex:16}]},34489:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70234);const d=[{value:"Children",paraId:0,tocIndex:0},{value:"：children 的处理方法",paraId:1,tocIndex:0},{value:"Component",paraId:2,tocIndex:0},{value:"：组件",paraId:1,tocIndex:0},{value:"Canvas",paraId:3,tocIndex:0},{value:"：画布组件",paraId:1,tocIndex:0},{value:"Timeline",paraId:4,tocIndex:0},{value:"：组件事件轴",paraId:1,tocIndex:0},{value:"Chart",paraId:5,tocIndex:0},{value:"：图表组件",paraId:1,tocIndex:0},{value:"提供了用于处理 this.props.children 的方法",paraId:6,tocIndex:1},{value:"类似 Array.map 遍历并返回新的对象",paraId:7,tocIndex:2},{value:"import { Children } from '@antv/f2';\nChildren.map(this.props.children, (child) => {\n  // TODO\n  return child;\n});\n",paraId:8,tocIndex:2},{value:"复制一个新元素",paraId:9,tocIndex:3},{value:"import { Children } from '@antv/f2';\nChildren.map(this.props.children, (child) => {\n  return Children.cloneElement(child, { ... });\n});\n",paraId:10,tocIndex:3},{value:"转换成数组",paraId:11,tocIndex:4},{value:"import { Children } from '@antv/f2';\nconst childrenArray = Children.toArray(children);\n",paraId:12,tocIndex:4},{value:"提供生成 jsx 元素的方法，",paraId:13,tocIndex:5},{value:"createElement(type, props, ...children)",paraId:13,tocIndex:5},{value:" 和 ",paraId:13,tocIndex:5},{value:"jsx(type, props, ...children)",paraId:13,tocIndex:5},{value:" 是完全一致的",paraId:13,tocIndex:5},{value:"import { createElement, Chart } from '@antv/f2';\n// 创建 chart 元素\nconst element = createElement(Chart, { data }, [...]);\n",paraId:14,tocIndex:5},{value:"提供了创建 ref 的方法",paraId:15,tocIndex:6},{value:"import { createRef } from '@antv/f2';\n// 创建 chart 元素\nconst ref = createRef(); // 生成 { current: null } 这样的结构\n",paraId:16,tocIndex:6}]},48630:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10864);const d=[{value:"仪表盘组件用于显示进度或完成度的可视化组件，常用于展示关键绩效指标（KPI）。",paraId:0},{value:"需要显示单个指标的完成进度",paraId:1,tocIndex:0},{value:"展示目标值与实际值的对比",paraId:1,tocIndex:0},{value:"显示百分比或比例数据",paraId:1,tocIndex:0},{value:"仪表盘样式的数据展示",paraId:1,tocIndex:0},{value:"import { jsx, Canvas, Gauge } from '@antv/f2';\n\nconst context = document.getElementById('container').getContext('2d');\n\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Gauge\n      center={{ x: 150, y: 150 }}\n      startAngle={Math.PI}\n      endAngle={Math.PI * 2}\n      percent={0.75}\n      r=\"100px\"\n    />\n  </Canvas>\n);\n\nconst chart = new Canvas(props);\nchart.render();\n",paraId:2,tocIndex:1},{value:"部分属性可参考 scale 图表度量，度量详细介绍可见：",paraId:3,tocIndex:2},{value:"度量",paraId:4,tocIndex:2},{value:"进度值，范围 0-1，默认为 ",paraId:5,tocIndex:3},{value:"0",paraId:5,tocIndex:3},{value:"起始角度（弧度），默认为 ",paraId:6,tocIndex:4},{value:"Math.PI",paraId:6,tocIndex:4},{value:"结束角度（弧度），默认为 ",paraId:7,tocIndex:5},{value:"Math.PI * 2",paraId:7,tocIndex:5},{value:"仪表盘中心点坐标，默认为 ",paraId:8,tocIndex:6},{value:"{ x: 150, y: 150 }",paraId:8,tocIndex:6},{value:"仪表盘半径，默认为 ",paraId:9,tocIndex:7},{value:"100",paraId:9,tocIndex:7},{value:"内圆半径，默认为 ",paraId:10,tocIndex:8},{value:"0",paraId:10,tocIndex:8},{value:"刻度数量，默认为 ",paraId:11,tocIndex:9},{value:"5",paraId:11,tocIndex:9},{value:"刻度偏移量，默认为 ",paraId:12,tocIndex:10},{value:"-20px",paraId:12,tocIndex:10},{value:"刻度长度，默认为 ",paraId:13,tocIndex:11},{value:"10px",paraId:13,tocIndex:11},{value:"是否显示，默认为 ",paraId:14,tocIndex:12},{value:"true",paraId:14,tocIndex:12},{value:"数据字段名",paraId:15,tocIndex:13}]},67054:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(85390);const d=[{value:"提供组件事件播放的控制",paraId:0},{value:"import { Timeline, Canvas, Component } from '@antv/f2';\n\n<Canvas context={context}>\n  <Timeline delay={0}>\n    <Component />\n    <Component />\n    ...\n  </Timeline>\n</Canvas>;\n",paraId:1,tocIndex:0},{value:"组件播放的间隔时间",paraId:2,tocIndex:2}]},49894:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(65071);const d=[{value:"F2 动画定义与 ",paraId:0},{value:"Web Animations API",paraId:0},{value:" 靠齐，除了组件层面，每个图形标签也都可以添加自定义动画。目前只支持基于 Keyframe 的动画，可定义动画执行阶段，以及变化效果 KeyframeEffect。",paraId:0},{value:"动画执行阶段分为 appear，update 以及 leave：",paraId:1},{value:"appear：初始化时的入场动画 , render 阶段.",paraId:2},{value:"update：数据更新时的更新动画 , props 发生改变.",paraId:2},{value:"leave：销毁前的离场动画 , destroy 阶段.",paraId:2},{value:"每个阶段都可以配置相应的 animation",paraId:3},{value:"属性名",paraId:4,tocIndex:0},{value:"类型",paraId:4,tocIndex:0},{value:"描述",paraId:4,tocIndex:0},{value:"easing",paraId:4,tocIndex:0},{value:"string",paraId:4,tocIndex:0},{value:"缓动函数，动画持续效果",paraId:4,tocIndex:0},{value:"duration",paraId:4,tocIndex:0},{value:"number",paraId:4,tocIndex:0},{value:"动画持续时间",paraId:4,tocIndex:0},{value:"delay",paraId:4,tocIndex:0},{value:"number",paraId:4,tocIndex:0},{value:"开始动画前的延迟",paraId:4,tocIndex:0},{value:"fill",paraId:4,tocIndex:0},{value:"可能值为 'none','forwards','backwards','both'",paraId:4,tocIndex:0},{value:"定义图形在动画执行前后的表现",paraId:4,tocIndex:0},{value:"iterations",paraId:4,tocIndex:0},{value:"number",paraId:4,tocIndex:0},{value:"循环次数，默认值为 1，Infinity 为无限循环",paraId:4,tocIndex:0},{value:"iterationStart",paraId:4,tocIndex:0},{value:"number",paraId:4,tocIndex:0},{value:"从何处执行动画，默认为 0",paraId:4,tocIndex:0},{value:"property",paraId:4,tocIndex:0},{value:"[]",paraId:4,tocIndex:0},{value:"声明需要变换的属性",paraId:4,tocIndex:0},{value:"start",paraId:4,tocIndex:0},{value:"Keyframe",paraId:4,tocIndex:0},{value:"开始帧状态",paraId:4,tocIndex:0},{value:"end",paraId:4,tocIndex:0},{value:"Keyframe",paraId:4,tocIndex:0},{value:"结束帧状态",paraId:4,tocIndex:0},{value:"clip",paraId:4,tocIndex:0},{value:"Clip",paraId:4,tocIndex:0},{value:"裁剪区域动画，可参见",paraId:4,tocIndex:0},{value:"clip",paraId:5,tocIndex:0},{value:"缓动函数，默认为 ",paraId:6,tocIndex:1},{value:"linear",paraId:6,tocIndex:1},{value:"，并且内置提供以下缓动函数，可参考",paraId:6,tocIndex:1},{value:"效果",paraId:6,tocIndex:1},{value:"constant",paraId:7,tocIndex:1},{value:"accelerate",paraId:7,tocIndex:1},{value:"decelerate",paraId:7,tocIndex:1},{value:"accelerate-decelerate",paraId:7,tocIndex:1},{value:"decelerate-accelerate",paraId:7,tocIndex:1},{value:"linear",paraId:7,tocIndex:1},{value:"ease-in / in",paraId:7,tocIndex:1},{value:"ease-out / out",paraId:7,tocIndex:1},{value:"ease-in-out / in-out",paraId:7,tocIndex:1},{value:"ease-out-in / out-in",paraId:7,tocIndex:1},{value:"ease",paraId:7,tocIndex:1},{value:"in-sine",paraId:7,tocIndex:1},{value:"out-sine",paraId:7,tocIndex:1},{value:"in-out-sine",paraId:7,tocIndex:1},{value:"out-in-sine",paraId:7,tocIndex:1},{value:"steps",paraId:7,tocIndex:1},{value:"in-quad",paraId:7,tocIndex:1},{value:"out-quad",paraId:7,tocIndex:1},{value:"in-out-quad",paraId:7,tocIndex:1},{value:"out-in-quad",paraId:7,tocIndex:1},{value:"step-start",paraId:7,tocIndex:1},{value:"in-cubic",paraId:7,tocIndex:1},{value:"out-cubic",paraId:7,tocIndex:1},{value:"in-out-cubic",paraId:7,tocIndex:1},{value:"out-in-cubic",paraId:7,tocIndex:1},{value:"step-end",paraId:7,tocIndex:1},{value:"in-quart",paraId:7,tocIndex:1},{value:"out-quart",paraId:7,tocIndex:1},{value:"in-out-quart",paraId:7,tocIndex:1},{value:"out-in-quart",paraId:7,tocIndex:1},{value:"in-quint",paraId:7,tocIndex:1},{value:"out-quint",paraId:7,tocIndex:1},{value:"in-out-quint",paraId:7,tocIndex:1},{value:"out-in-quint",paraId:7,tocIndex:1},{value:"in-expo",paraId:7,tocIndex:1},{value:"out-expo",paraId:7,tocIndex:1},{value:"in-out-expo",paraId:7,tocIndex:1},{value:"out-in-expo",paraId:7,tocIndex:1},{value:"in-circ",paraId:7,tocIndex:1},{value:"out-circ",paraId:7,tocIndex:1},{value:"in-out-circ",paraId:7,tocIndex:1},{value:"out-in-circ",paraId:7,tocIndex:1},{value:"in-back",paraId:7,tocIndex:1},{value:"out-back",paraId:7,tocIndex:1},{value:"in-out-back",paraId:7,tocIndex:1},{value:"out-in-back",paraId:7,tocIndex:1},{value:"in-bounce",paraId:7,tocIndex:1},{value:"out-bounce",paraId:7,tocIndex:1},{value:"in-out-bounce",paraId:7,tocIndex:1},{value:"out-in-bounce",paraId:7,tocIndex:1},{value:"in-elastic",paraId:7,tocIndex:1},{value:"out-elastic",paraId:7,tocIndex:1},{value:"in-out-elastic",paraId:7,tocIndex:1},{value:"out-in-elastic",paraId:7,tocIndex:1},{value:"spring / spring-in",paraId:7,tocIndex:1},{value:"spring-out",paraId:7,tocIndex:1},{value:"spring-in-out",paraId:7,tocIndex:1},{value:"spring-out-in",paraId:7,tocIndex:1},{value:"目前支持变换的属性有：",paraId:8,tocIndex:2},{value:"属性名",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"transform",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"和 ",paraId:9,tocIndex:2},{value:"CSS Transform",paraId:9,tocIndex:2},{value:" 保持一致",paraId:9,tocIndex:2},{value:"opacity",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"透明度",paraId:9,tocIndex:2},{value:"strokeOpacity",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"描边透明度",paraId:9,tocIndex:2},{value:"fill",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"填充色",paraId:9,tocIndex:2},{value:"stroke",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"描边色",paraId:9,tocIndex:2},{value:"lineWidth",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"线宽",paraId:9,tocIndex:2},{value:"r",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Circle 的半径",paraId:9,tocIndex:2},{value:"rx/ry",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Ellipse 的半径",paraId:9,tocIndex:2},{value:"width",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Rect/Image 的宽度",paraId:9,tocIndex:2},{value:"height",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Rect/Image 的高度",paraId:9,tocIndex:2},{value:"x1/y1/x2/y2",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"Line 的端点坐标",paraId:9,tocIndex:2},{value:"offsetDistance",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"路径偏移，和",paraId:9,tocIndex:2},{value:"CSS Offset",paraId:9,tocIndex:2},{value:"保持一致",paraId:9,tocIndex:2},{value:"lineDash",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"实线和间隔的长度",paraId:9,tocIndex:2},{value:"lineDashOffset",paraId:9,tocIndex:2},{value:"[number, number]",paraId:9,tocIndex:2},{value:"设置虚线的偏移量，和",paraId:9,tocIndex:2},{value:"Canvas lineDashOffset",paraId:9,tocIndex:2},{value:"保持一致，可以实现蚂蚁线的效果",paraId:9,tocIndex:2},{value:"path",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"Path 的定义，可做形变动画",paraId:9,tocIndex:2},{value:"<text\n  style={{\n    text: `测试`,\n  }}\n  animation={{\n    appear: {\n      easing: 'linear',\n      duration: 450,\n      property: ['x', 'y'],\n      start: {\n        x: 0,\n        y: 0,\n      },\n      end: {\n        x: 100,\n        y: 100,\n      },\n    },\n    update: {\n      {\n        easing: 'quadraticOut',\n        duration: 450,\n        clip: {\n          type: 'rect',\n          property: ['width'],\n          style: {\n            x: 100,\n            y: 100,\n            height: 20,\n          },\n          start: {\n            width: 0,\n          },\n          end: {\n            width: 50,\n          },\n        },\n      }\n    },\n    leave: {},\n  }}\n/>\n",paraId:10,tocIndex:3},{value:"让图形沿着某个路径移动，在 css 中可通过",paraId:11,tocIndex:5},{value:"MotionPath",paraId:11,tocIndex:5},{value:"实现，F2 可通过图形标签上设置 offset 属性实现，目前支持 ",paraId:11,tocIndex:5},{value:" 和 ",paraId:11,tocIndex:5},{value:"。",paraId:11,tocIndex:5},{value:"<circle\n  style={{\n    fill: '#808080',\n    r: 10,\n    offset: {\n      type: 'polyline',\n      style: {\n        points: [\n          [0, 3],\n          [50, 10],\n          [130, 80],\n          [250, 40],\n        ],\n      },\n    },\n  }}\n  animation={{\n    appear: {\n      easing: 'quadraticOut',\n      duration: 1000,\n      property: ['offsetDistance'],\n      start: {\n        offsetDistance: 0,\n      },\n      end: {\n        offsetDistance: 1,\n      },\n    },\n  }}\n/>\n",paraId:12,tocIndex:5},{value:"F2 在组件 Line 中内置了该功能，提供 endView 接口，可设置沿着线段移动的元素，具体可见 ",paraId:13,tocIndex:5},{value:"demo",paraId:14,tocIndex:5}]},43221:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73246);const d=[{value:"组件结构基本保持和 React 一致，如果你了解 React ，相信你一看就会",paraId:0},{value:"import { Component } from '@antv/f2';\n\nclass Hello extends Component {\n  constructor(props) {\n    super(props);\n  }\n  willMount() {}\n  didMount() {}\n  shouldUpdate() {\n    return true;\n  }\n  willReceiveProps(props) {}\n  willUpdate() {}\n  didUpdate() {}\n  render() {\n    const { color } = this.props;\n    return <rect attrs={{ x: 10, y: 10, width: 10, height: 10, fill: color }} />;\n  }\n  didUnmount() {}\n}\n",paraId:1,tocIndex:0},{value:"import { Canvas } from '@antv/f2';\nimport Hello from './hello';\n\n<Canvas>\n  <Hello color=\"red\" />\n</Canvas>;\n",paraId:2,tocIndex:1}]},52533:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(82557);const d=[{value:"坐标系是将两种位置标度结合在一起组成的 2 维定位系统，描述了数据是如何映射到图形所在的平面。",paraId:0},{value:"F2 提供了直角坐标系和极坐标两种类型，目前所有的坐标系均是 2 维的。",paraId:1},{value:"F2 默认提供的坐标系类型为笛卡尔坐标系，当需要切换坐标系时，可以通过调用下面的语法声明需要使用的坐标系：",paraId:2,tocIndex:0},{value:"<Canvas>\n  <Chart\n    coord={{\n      type: coordType,\n    }}\n  ></Chart>\n</Canvas>\n",paraId:3,tocIndex:0},{value:"坐标系类型",paraId:4,tocIndex:0},{value:"说明",paraId:4,tocIndex:0},{value:"rect",paraId:4,tocIndex:0},{value:"直角坐标系，目前仅支持二维，由 x, y 两个互相垂直的坐标轴构成。",paraId:4,tocIndex:0},{value:"polar",paraId:4,tocIndex:0},{value:"极坐标系，由角度和半径 2 个维度构成。",paraId:4,tocIndex:0},{value:"坐标系可以分为笛卡尔坐标系和非笛卡尔坐标系，非笛卡尔坐标系即极坐标，由角度和半径这两个维度来确定位置。",paraId:5,tocIndex:1},{value:"利用极坐标可生成饼图、玫瑰图和雷达图等，较适用于周期性数据的可视化场景，比如时间和方向数据。",paraId:6,tocIndex:1},{value:"坐标系类型的变换会改变几何标记的形状，比如在极坐标系中，矩形将变为圆环的一部分。",paraId:7,tocIndex:1},{value:"例如下图展示的柱状图、层叠柱状图，在不同坐标系下就能变换出各种类型：",paraId:8,tocIndex:1},{value:"直角坐标系",paraId:9,tocIndex:1},{value:"极坐标（未转置）",paraId:9,tocIndex:1},{value:"极坐标（转置）",paraId:9,tocIndex:1},{value:"层叠柱状图",paraId:9,tocIndex:1},{value:"柱状图",paraId:9,tocIndex:1},{value:"<Canvas>\n  <Chart\n    coord={{\n      // 声明直角坐标系\n      type: 'rect',\n      // 坐标系进行转置\n      transposed: true,\n    }}\n  ></Chart>\n</Canvas>\n",paraId:10,tocIndex:2},{value:"<Canvas>\n  <Chart\n    coord={{\n      // 声明极坐标\n      type: 'polar',\n      // 坐标系进行转置\n      startAngle: { Number }, // 起始弧度\n      endAngle: { Number }, // 结束弧度\n      innerRadius: { Number }, // 用于空心部分的半径设置\n      radius: { Number }, // 实心圆的半径大小设置\n      transposed: true, // 极坐标转置\n    }}\n  ></Chart>\n</Canvas>\n",paraId:11,tocIndex:3},{value:"这里需要说明的是，F2 极坐标默认的起始角度和结束角度如下图所示：",paraId:12,tocIndex:3}]},55462:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(34831);const d=[{value:"数据是绘制一张图表最基本的部分。F2 基本的数据格式如下：",paraId:0},{value:"const data = [\n  { year: 2010, sales: 40 },\n  { year: 2011, sales: 30 },\n  { year: 2012, sales: 50 },\n  { year: 2013, sales: 60 },\n  { year: 2014, sales: 70 },\n  { year: 2015, sales: 80 },\n  { year: 2016, sales: 80 },\n  { year: 2017, sales: 90 },\n  { year: 2018, sales: 120 },\n];\n",paraId:1},{value:"绘制饼图时，数据集中的每一条记录中",paraId:2,tocIndex:1},{value:"必须包含一个常量字段（并且必须是字符串类型）",paraId:2,tocIndex:1},{value:"，如下所示：",paraId:2,tocIndex:1},{value:"const data = [\n  { name: '芳华', percent: 0.4, a: '1' },\n  { name: '妖猫传', percent: 0.2, a: '1' },\n  { name: '机器之血', percent: 0.18, a: '1' },\n  { name: '心理罪', percent: 0.15, a: '1' },\n  { name: '寻梦环游记', percent: 0.05, a: '1' },\n  { name: '其他', percent: 0.02, a: '1' },\n];\n",paraId:3,tocIndex:1},{value:"详见饼图",paraId:4,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"当 x 轴或者 y 轴的数据为数组时，我们默认会将映射为一段区间，进而绘制为区间柱状图。如下数据格式：",paraId:6,tocIndex:2},{value:"const data = [\n  { x: '分类一', y: [76, 100] },\n  { x: '分类二', y: [56, 108] },\n  { x: '分类三', y: [38, 129] },\n  { x: '分类四', y: [58, 155] },\n  { x: '分类五', y: [45, 120] },\n  { x: '分类六', y: [23, 99] },\n  { x: '分类七', y: [18, 56] },\n  { x: '分类八', y: [18, 34] },\n];\n",paraId:7,tocIndex:2},{value:"详见区间柱状图",paraId:8,tocIndex:2},{value:"示例",paraId:9,tocIndex:2},{value:"。",paraId:8,tocIndex:2}]},57366:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73679);const d=[{value:"5.x 版本中，F2 的事件系统也得以升级，基于 PointerEvent 标准监听封装了移动端事件。得益于底层引擎的事件系统以及拾取系统，F2 支持在图形标签上直接监听常见的移动端事件。",paraId:0},{value:"事件名",paraId:1,tocIndex:0},{value:"类型",paraId:1,tocIndex:0},{value:"描述",paraId:1,tocIndex:0},{value:"onClick",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"点击事件",paraId:1,tocIndex:0},{value:"onPanStart",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指触摸图形时触发 0",paraId:1,tocIndex:0},{value:"onPan",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指在图形上移动时触发",paraId:1,tocIndex:0},{value:"onPanEnd",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指从图形上离开时触发",paraId:1,tocIndex:0},{value:"onTouchStart",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指触摸图形时触发",paraId:1,tocIndex:0},{value:"onTouchMove",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指在图形上移动时触发",paraId:1,tocIndex:0},{value:"onTouchEnd",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指从图形上离开时触发",paraId:1,tocIndex:0},{value:"onTouchEndOutside",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指从图形外离开时触发",paraId:1,tocIndex:0},{value:"onPressStart",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指在图形上开始按压时触发",paraId:1,tocIndex:0},{value:"onPress",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指在图形上按压时触发",paraId:1,tocIndex:0},{value:"onPressEnd",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指在图形上结束按压时触发",paraId:1,tocIndex:0},{value:"onSwipe",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指快扫时触发",paraId:1,tocIndex:0},{value:"onPinchStart",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指开始缩放时触发",paraId:1,tocIndex:0},{value:"onPinch",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指缩放时触发",paraId:1,tocIndex:0},{value:"onPinchEnd",paraId:1,tocIndex:0},{value:"funtion",paraId:1,tocIndex:0},{value:"手指结束缩放时触发",paraId:1,tocIndex:0}]},72838:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23380);const d=[{value:"F2 使用 JSX 语法来构建图表，所以需要在运行前对 JSX 语法进行编译， JSX 更多细节可参考 React 的官方文档 ",paraId:0},{value:"JSX 简介",paraId:0},{value:"Babel 和 TypeScript 都可以编译 JSX 语法，并且在编译时 JSX 语法时，会有 2 种编译模式，在实际项目中可根据自己实际情况选择和使用",paraId:1},{value:"JSX 2 种编译的差别可见：",paraId:2},{value:"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#runtime",paraId:3},{value:"https://zh-hans.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",paraId:3},{value:"在 Babel 中是使用 ",paraId:4,tocIndex:0},{value:"@babel/plugin-transform-react-jsx",paraId:4,tocIndex:0},{value:" 这个插件来编译 JSX 的",paraId:4,tocIndex:0},{value:"npm install --save-dev @babel/plugin-transform-react-jsx\n",paraId:5,tocIndex:1},{value:'{\n  "plugins": [\n    [\n      "@babel/plugin-transform-react-jsx",\n      {\n        "pragma": "jsx",\n        "pragmaFrag": "Fragment"\n      }\n    ]\n  ]\n}\n',paraId:6,tocIndex:3},{value:'{\n  "plugins": [\n    [\n      "@babel/plugin-transform-react-jsx",\n      {\n        "runtime": "automatic",\n        "importSource": "@antv/f2"\n      }\n    ]\n  ]\n}\n',paraId:7,tocIndex:4},{value:"在 TypeScript 中也分别支持这 2 种编译模式",paraId:8,tocIndex:5},{value:'{\n  "compilerOptions": {\n    "jsxFactory": "jsx",\n    "jsxFragmentFactory": "Fragment"\n  }\n}\n',paraId:9,tocIndex:7},{value:'{\n  "compilerOptions": {\n    "jsx": "react-jsx",\n    "jsxImportSource": "@antv/f2"\n  }\n}\n',paraId:10,tocIndex:8}]},38237:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(99211);const d=[{value:"# 安装 F2 依赖\nnpm i @antv/f2 --save\n\n# 安装小程序组件\nnpm i @antv/f-my --save\n\n# 微信小程序\nnpm i @antv/f-wx --save\n\n",paraId:0,tocIndex:1},{value:"如果项目已有 jsx 编译，可忽略此步骤",paraId:1,tocIndex:2},{value:"详见：",paraId:2,tocIndex:2},{value:"配置 jsx transform",paraId:3,tocIndex:2},{value:"package.json",paraId:4,tocIndex:3},{value:'{\n  "scripts": {\n    "beforeCompile": "babel pages --out-dir pages --only **/*.jsx"\n  }\n}\n',paraId:5,tocIndex:3},{value:"mini.project.json",paraId:6,tocIndex:4},{value:'{\n  "scripts": {\n    "beforeCompile": "npm run beforeCompile"\n  }\n}\n',paraId:7,tocIndex:4},{value:"page.json",paraId:8,tocIndex:5},{value:'{\n  "usingComponents": {\n    "f2": "@antv/f-my"\n  }\n}\n',paraId:9,tocIndex:5},{value:"page.axml",paraId:10,tocIndex:5},{value:'<view class="container">\n  <f2 onRender="onRenderChart"></f2>\n</view>\n',paraId:11,tocIndex:5},{value:"page.acss",paraId:12,tocIndex:5},{value:".container {\n  width: 100%;\n  height: 600rpx;\n}\n",paraId:13,tocIndex:5},{value:"chart.jsx",paraId:14,tocIndex:5},{value:'import { Chart, Interval, Axis } from \'@antv/f2\';\n\nexport default (props) => {\n  const { data } = props;\n  return (\n    <Chart data={data}>\n      <Axis field="genre" />\n      <Axis field="sold" />\n      <Interval x="genre" y="sold" color="genre" />\n    </Chart>\n  );\n};\n',paraId:15,tocIndex:5},{value:"page.jsx",paraId:16,tocIndex:5},{value:"import Chart from './chart';\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nPage({\n  data: {},\n  onRenderChart() {\n    return <Chart data={data} />;\n  },\n});\n",paraId:17,tocIndex:5},{value:"如果不想在入口文件写 jsx 语法，可以使用下面方式",paraId:18,tocIndex:5},{value:"page.js",paraId:19,tocIndex:5},{value:"// 通过 createElement 方式创建\nimport { createElement } from '@antv/f2';\nimport Chart from './chart';\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nPage({\n  data: {},\n  onRenderChart() {\n    return createElement(Chart, {\n      data: data,\n    });\n  },\n});\n",paraId:20,tocIndex:5},{value:"参考示例：",paraId:21,tocIndex:6},{value:"https://github.com/antvis/FEngine/tree/master/packages/f-my/examples",paraId:21,tocIndex:6},{value:"page.json",paraId:22,tocIndex:8},{value:'{\n  "usingComponents": {\n    "f2": "@antv/f-wx"\n  }\n}\n',paraId:23,tocIndex:8},{value:"page.wxml",paraId:24,tocIndex:8},{value:'<view class="container">\n  <f2 onRender="{{onRenderChart}}" />\n</view>\n',paraId:25,tocIndex:8},{value:"page.wxss",paraId:26,tocIndex:8},{value:".container {\n  width: 100%;\n  height: 600rpx;\n}\n",paraId:27,tocIndex:8},{value:"chart.jsx",paraId:28,tocIndex:8},{value:'import { Chart, Interval, Axis } from \'@antv/f2\';\n\nexport default (props) => {\n  const { data } = props;\n  return (\n    <Chart data={data}>\n      <Axis field="genre" />\n      <Axis field="sold" />\n      <Interval x="genre" y="sold" color="genre" />\n    </Chart>\n  );\n};\n',paraId:29,tocIndex:8},{value:"page.jsx",paraId:30,tocIndex:8},{value:"import Chart from './chart';\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nPage({\n  data: {\n    onRenderChart() {\n      return <Chart data={data} />;\n    },\n  },\n});\n",paraId:31,tocIndex:8},{value:"如果不想在入口文件写 jsx 语法，可以使用下面方式",paraId:32,tocIndex:8},{value:"page.js",paraId:33,tocIndex:8},{value:"import { createElement } from '@antv/f2';\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nPage({\n  data: {\n    onRenderChart() {\n      return createElement(Chart, {\n        data: data,\n      });\n    },\n  },\n});\n",paraId:34,tocIndex:8},{value:"参考示例：",paraId:35,tocIndex:9},{value:"https://github.com/antvis/FEngine/tree/master/packages/f-wx/examples",paraId:35,tocIndex:9}]},80833:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59998);const d=[{value:"详见：",paraId:0,tocIndex:0},{value:"配置 jsx transform",paraId:1,tocIndex:0},{value:"import { Canvas, Chart, Interval, Axis } from '@antv/f2';\nimport { createCanvas } from 'canvas';\nimport fs from 'fs';\nimport path from 'path';\n\nconst canvas = createCanvas(200, 200);\nconst ctx = canvas.getContext('2d');\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n(async () => {\n  const { props } = (\n    <Canvas context={ctx} pixelRatio={1} animate={false}>\n      <Chart data={data}>\n        <Axis field=\"genre\" />\n        <Axis field=\"sold\" />\n        <Interval x=\"genre\" y=\"sold\" color=\"genre\" />\n      </Chart>\n    </Canvas>\n  );\n\n  const fcanvas = new Canvas(props);\n  await fcanvas.render();\n\n  const out = fs.createWriteStream(path.join(__dirname, 'chart.png'));\n  const stream = canvas.createPNGStream();\n  stream.pipe(out);\n\n  out.on('finish', () => {\n    process.exit();\n  });\n})();\n",paraId:2,tocIndex:1}]},62091:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(33647);const d=[{value:"在 5.0 中，F 系列基于移动端特点和共性进行了移动端底层架构（Fengine）的统一，对接于最新的 G 5.0 之上。我们利用 Fengine 提供的多端适配，可以快速适配各种框架/端。",paraId:0},{value:"其中：",paraId:1,tocIndex:0},{value:"@antv/f-engine ---- 无框架",paraId:2,tocIndex:0},{value:"@antv/f-react ---- react 框架",paraId:2,tocIndex:0},{value:"@antv/f-vue ---- vue 框架",paraId:2,tocIndex:0},{value:"@antv/f-my ---- 支付宝小程序端",paraId:2,tocIndex:0},{value:"@antv/f-wx ---- 微信小程序端",paraId:2,tocIndex:0},{value:"F2 默认引入 @antv/f-engine 中的 canvas。使用者根据框架/端，引入不同端的 canvas 以及 F2， 即可快速搭建可视化图表。具体使用方式可查看对应文档。",paraId:3,tocIndex:1},{value:"F2 是基于 ",paraId:4,tocIndex:2},{value:"CanvasRenderingContext2D",paraId:4,tocIndex:2},{value:" 的标准接口绘制的，所以只要能提供标准 ",paraId:4,tocIndex:2},{value:"CanvasRenderingContext2D",paraId:4,tocIndex:2},{value:" 接口的实现对象，F2 就能进行图表绘制",paraId:4,tocIndex:2},{value:"因为在小程序中给的 ",paraId:5,tocIndex:2},{value:"context",paraId:5,tocIndex:2},{value:" 对象不是标准的 ",paraId:5,tocIndex:2},{value:"CanvasRenderingContext2D",paraId:5,tocIndex:2},{value:" , 所以封装的核心思路是将 ",paraId:5,tocIndex:2},{value:"context",paraId:5,tocIndex:2},{value:" 和 ",paraId:5,tocIndex:2},{value:"CanvasRenderingContext2D",paraId:5,tocIndex:2},{value:" 对齐，所以 F2 针对支付宝和微信这 2 个常见的场景做了一层 ",paraId:5,tocIndex:2},{value:"context",paraId:5,tocIndex:2},{value:" 的对齐，详情可见: ",paraId:5,tocIndex:2},{value:"https://github.com/antvis/f2-context",paraId:5,tocIndex:2},{value:", 其他小程序也可以按同样的思路封装",paraId:5,tocIndex:2}]},75787:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46012);const d=[{value:"因为 F2 也是使用声明式构建图表 UI，也内置了一套统一的组件，可以很容易地与 React 生态结合，\b 使用时可以完全按 React 组件库的方式来使用",paraId:0},{value:"npm install @antv/f2 --save\nnpm install @antv/f-react --save\n",paraId:1,tocIndex:0},{value:"完整示例",paraId:2,tocIndex:0},{value:"import React from 'react';\nimport ReactDOM from 'react';\nimport Canvas from '@antv/f-react';\nimport { Chart, Interval } from '@antv/f2';\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nReactDOM.render(\n  <div>\n    <Canvas>\n      <Chart data={data}>\n        <Interval x=\"genre\" y=\"sold\" />\n      </Chart>\n    </Canvas>\n  </div>,\n  document.getElementById('root')\n);\n",paraId:3,tocIndex:0},{value:"完整示例可参考",paraId:4,tocIndex:0},{value:"codesandbox: ",paraId:5,tocIndex:0},{value:"https://codesandbox.io/s/f-react-forked-lcrxqf",paraId:5,tocIndex:0},{value:"https://github.com/antvis/FEngine/tree/master/packages/f-react/examples",paraId:5,tocIndex:0}]},72212:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53295);const d=[{value:"借助 G 的 ",paraId:0},{value:"渲染器",paraId:0},{value:", F2 也可以使用 svg 渲染",paraId:0},{value:"npm i @antv/g-mobile-svg --save\n",paraId:1,tocIndex:0},{value:'<div id="container"></div>\n',paraId:2,tocIndex:1},{value:"import { Canvas, Chart, Interval, jsx, Axis } from '@antv/f2';\nimport { Renderer } from '@antv/g-mobile-svg';\n\nconst container = document.getElementById('container');\n\n// 实例化 svg 渲染器\nconst renderer = new Renderer();\n\n...\n\nconst { props } = (\n  // 生命渲染容器和渲染器\n  <Canvas container={container} renderer={renderer} width={300} height={200}>\n    {...}\n  </Canvas>\n);\nconst canvas = new Canvas(props);\ncanvas.render();\n",paraId:3,tocIndex:2},{value:"演示示例：",paraId:4,tocIndex:2},{value:"https://codesandbox.io/s/prod-fire-nk4d8x",paraId:4,tocIndex:2}]},79060:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10417);const d=[{value:"为了方便 Vue 项目的使用，Fengine 也封装了一个 vue 的组件",paraId:0},{value:"npm install @antv/f2 --save\nnpm install @antv/f-vue --save\n",paraId:1,tocIndex:1},{value:"npm install @babel/plugin-transform-react-jsx --save-dev\n",paraId:2,tocIndex:2},{value:"打开 ",paraId:3,tocIndex:2},{value:"vue.config.js",paraId:3,tocIndex:2},{value:" 添加如下代码",paraId:3,tocIndex:2},{value:"{\n  chainWebpack: (config) => {\n    config.module\n      .rule('F2')\n      .test(/\\.jsx$/)\n      .use('babel')\n      .loader('babel-loader')\n      .options({\n        plugins: [\n          [\n            '@babel/plugin-transform-react-jsx',\n            {\n              runtime: 'automatic',\n              importSource: '@antv/f2',\n            },\n          ],\n        ],\n      })\n      .end();\n  },\n}\n",paraId:4,tocIndex:2},{value:"npm install @rollup/plugin-babel --save-dev\nnpm install @babel/plugin-transform-react-jsx --save-dev\n",paraId:5,tocIndex:3},{value:"打开 ",paraId:6,tocIndex:3},{value:"vite.config.js",paraId:6,tocIndex:3},{value:" 添加如下配置",paraId:6,tocIndex:3},{value:"import vue from '@vitejs/plugin-vue';\nimport vueJsx from '@vitejs/plugin-vue-jsx';\nimport { babel } from '@rollup/plugin-babel';\n\nexport default defineConfig({\n  plugins: [\n    babel({\n      plugins: [\n        [\n          '@babel/plugin-transform-react-jsx',\n          {\n            runtime: 'automatic',\n            importSource: '@antv/f2',\n          },\n        ],\n      ],\n    }),\n    vue(),\n    vueJsx(),\n  ],\n});\n",paraId:7,tocIndex:3},{value:"<script>\nimport { toRaw } from 'vue';\nimport Canvas from '@antv/f-vue';\nimport { Chart, Interval, Axis } from '@antv/f2';\n\nconst data1 = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\nconst data2 = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 20 },\n  { genre: 'Shooter', sold: 50 },\n  { genre: 'Other', sold: 50 },\n];\nexport default {\n  name: 'App',\n  data() {\n    return {\n      year: '2021',\n      chartData: data1,\n    };\n  },\n  mounted() {\n    setTimeout(() => {\n      this.year = '2022';\n      this.chartData = data2;\n    }, 1000);\n  },\n  render() {\n    const { year, chartData } = this;\n    return (\n      <div className=\"container\">\n        <Canvas pixelRatio={window.devicePixelRatio}>\n          <Chart data={toRaw(chartData)}>\n            <Axis field=\"genre\" />\n            <Axis field=\"sold\" />\n            <Interval x=\"genre\" y=\"sold\" color=\"genre\" />\n          </Chart>\n        </Canvas>\n      </div>\n    );\n  },\n};\n<\/script>\n\n<style>\n.container {\n  width: 500px;\n  height: 300px;\n}\n</style>\n",paraId:8,tocIndex:4},{value:"完整示例可参考",paraId:9,tocIndex:4},{value:"codesandbox: ",paraId:10,tocIndex:4},{value:"https://codesandbox.io/s/f-vue-wlwtkb?file=/src/App.vue",paraId:10,tocIndex:4},{value:"https://github.com/antvis/FEngine/tree/master/packages/f-vue/examples",paraId:10,tocIndex:4}]},57222:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(92539);const d=[{value:"F2 4.0 开始，我们将以声明式编写图表，声明式可以让你的代码更直观和简介，避免了复杂的 API 调用，而且我们也采用了 JSX 语法，不仅方便使用，还可以很方便地和 React、Vue 这些框架结合",paraId:0,tocIndex:0},{value:"为了构建复杂的可视化图表，组件是一种不可或缺的能力，在 F2 里，我们也参考 React 的设计模式，内置了一套完善的组件能力，能简单方便地分装自己的组件",paraId:1,tocIndex:1},{value:"下面示例是以非 React 为演示的，如果项目已经是 React， 可以参考 ",paraId:2,tocIndex:2},{value:"如何在 React 中使用",paraId:3,tocIndex:2},{value:"可见详细介绍：",paraId:4,tocIndex:3},{value:"配置 jsx transform",paraId:5,tocIndex:3},{value:" ",paraId:6,tocIndex:5},{value:"npm install @antv/f2 --save\n",paraId:7,tocIndex:5},{value:"在页面上创建一个 ",paraId:8,tocIndex:7},{value:"<canvas>",paraId:8,tocIndex:7},{value:'<canvas id="myChart" width="400" height="260"></canvas>\n',paraId:9,tocIndex:7},{value:"// F2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 获取 canvas context\nconst context = document.getElementById('myChart').getContext('2d');\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Chart data={data}>\n      <Axis field=\"genre\" />\n      <Axis field=\"sold\" />\n      <Interval x=\"genre\" y=\"sold\" color=\"genre\" />\n      <Tooltip />\n    </Chart>\n  </Canvas>\n);\n\nconst canvas = new Canvas(props);\ncanvas.render();\n",paraId:10,tocIndex:8},{value:"完成上述两步之后，保存文件并用浏览器打开，一张柱状图就绘制成功了：",paraId:11,tocIndex:8},{value:"更多的示例直接查看 ",paraId:12,tocIndex:9},{value:"Demo",paraId:13,tocIndex:9},{value:"。",paraId:12,tocIndex:9}]},57225:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(3606);const d=[{value:"F2 同 G2 一样，基于《The Grammar of Graphics》(Leland Wilkinson 著)一书所提的图形理论。该理论是一套用来描述所有统计图形深层特性的语法规则，该语法回答了『什么是统计图形』这一问题，以自底向上的方式组织最基本的元素形成更高级的元素。",paraId:0,tocIndex:0},{value:"所以对于 F2 来说，",paraId:1,tocIndex:0},{value:"没有具体的图表类型的概念，所有的图表都是通过组合不同的图形语法元素形成的",paraId:1,tocIndex:0},{value:"最基础的部分是你想要可视化的",paraId:2,tocIndex:1},{value:"数据",paraId:3,tocIndex:1},{value:"以及一系列将数据中的变量对应到",paraId:2,tocIndex:1},{value:"绘图属性",paraId:4,tocIndex:1},{value:"的映射；",paraId:2,tocIndex:1},{value:"几何标记",paraId:5,tocIndex:2},{value:"，可以理解为你在图表中实际看到的图形元素，如点、线、多边形等，每个几何标记对象含有多个图形属性，F2 图形语法的核心就是建立数据中的一系列变量到图形属性的映射；",paraId:5,tocIndex:2},{value:"度量",paraId:6,tocIndex:3},{value:"，作为数据空间到图形属性空间的转换桥梁，每一个图形属性都对应着一个或者多个度量；",paraId:7,tocIndex:3},{value:"坐标系",paraId:8,tocIndex:4},{value:"，描述了数据是如何映射到图形所在的平面的，一个几何标记在不同坐标系下会有不同的表现。目前 F2 提供了笛卡尔坐标系、极坐标系两种坐标系；",paraId:9,tocIndex:4},{value:"辅助元素是为了增强图表的可读性和可理解性，F2 中的辅助元素包含坐标轴 Axis、图例 Legend、提示信息 Tooltip、静态辅助标记 Guide。",paraId:10,tocIndex:5},{value:"所以，在 F2 中，我们通常这么描述一张图表：一张图表就是从数据到几何标记对象的图形属性的一个映射，此外图形中还可能包含数据的统计变换，最后绘制在某个特定的坐标系中。",paraId:11,tocIndex:5},{value:"更多内容请阅读以下篇章：",paraId:12,tocIndex:5},{value:"图表组成",paraId:13,tocIndex:5},{value:"数据",paraId:14,tocIndex:5},{value:"度量",paraId:15,tocIndex:5},{value:"几何标记",paraId:16,tocIndex:5},{value:"绘图属性",paraId:17,tocIndex:5},{value:"坐标系",paraId:18,tocIndex:5}]},63501:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23395);const d=[{value:"在 F2 里，可以利用 JSX 和",paraId:0},{value:"图形标签 Shape",paraId:1},{value:"更方便构造自定义图形。",paraId:0},{value:"/** @jsx jsx */\nimport { jsx, Canvas } from '@antv/f2';\n\nconst context = document.getElementById('container').getContext('2d');\n\nconst Hello = () => {\n  return (\n    <group>\n      <rect\n        style={{\n          x: 10,\n          y: 10,\n          width: 40,\n          height: 40,\n          lineWidth: '2px',\n          stroke: '#000',\n          fill: 'red',\n        }}\n      />\n      <circle style={{ x: 80, y: 30, r: 20, lineWidth: '2px', stroke: '#000', fill: 'red' }} />\n      <text\n        style={{\n          x: 120,\n          y: 30,\n          text: '文本',\n          fontSize: 20,\n          fill: '#000',\n        }}\n      />\n    </group>\n  );\n};\n\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Hello />\n  </Canvas>\n);\n\nconst chart = new Canvas(props);\nchart.render();\n",paraId:2},{value:"以上就可以利用标签绘制各种自定义元素。假如想让 Hello 走组件 Component 渲染，拥有生命周期，可以监测数据变化，可以参考下一章节",paraId:3},{value:"组件介绍-Component",paraId:4},{value:"假如想保留 F2 组件的计算逻辑，只是自定义视觉 View 部分，可以参考",paraId:5},{value:"进阶-自定义 View",paraId:6}]},85783:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(50301);const d=[{value:"当和 React 同时使用时，碰到 ",paraId:0},{value:"group",paraId:0},{value:", ",paraId:0},{value:"circle",paraId:0},{value:", ",paraId:0},{value:"rect",paraId:0},{value:" 等这些标签的类型提示错误时，如下图所以 ",paraId:0},{value:"因为 React svg 的标签类型里也有 ",paraId:1,tocIndex:0},{value:"circle",paraId:1,tocIndex:0},{value:"， ",paraId:1,tocIndex:0},{value:"rect",paraId:1,tocIndex:0},{value:" 等这些标签，这些和 F2 定义的冲突了，需要我们再单独引入 F2 标签定义的命名空间",paraId:1,tocIndex:0},{value:"先确定当前项目的 jsx 编译模式，打开 ",paraId:2,tocIndex:1},{value:"tsconfig.json",paraId:2,tocIndex:1},{value:"找到 ",paraId:2,tocIndex:1},{value:"compilerOptions",paraId:2,tocIndex:1},{value:" 下的 ",paraId:2,tocIndex:1},{value:"jsx",paraId:2,tocIndex:1},{value:" 配置项，如果没有则默认为 ",paraId:2,tocIndex:1},{value:"react",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"react",paraId:2,tocIndex:1},{value:" 为 ",paraId:2,tocIndex:1},{value:"classic",paraId:3,tocIndex:1},{value:" 编译模式，",paraId:2,tocIndex:1},{value:"react-jsx",paraId:2,tocIndex:1},{value:" 为 ",paraId:2,tocIndex:1},{value:"automatic",paraId:4,tocIndex:1},{value:" 编译模式",paraId:2,tocIndex:1},{value:"在文件顶部增加如下注释代码和模块引用",paraId:5,tocIndex:2},{value:"/** @jsx jsx */\nimport { jsx } from '@antv/f2';\n...\n",paraId:6,tocIndex:2},{value:"在文件顶部增加如下注释代码",paraId:7,tocIndex:3},{value:"/** @jsxImportSource @antv/f2 */\n...\n",paraId:8,tocIndex:3},{value:"完成后即可解决类型错误问题",paraId:9,tocIndex:3},{value:"因为代码编译是以文件为单位的，在一个文件里只能使用一种标签类型，如果是在同一文件中的，需要再新建一个新的文件",paraId:10,tocIndex:4}]},48499:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(24290);const d=[{value:"度量 Scale，是数据空间到图形空间的转换桥梁，负责原始数据到 [0, 1] 区间数值的相互转换工作。针对不同的数据类型对应不同类型的度量。",paraId:0},{value:"根据数据的类型，F2 支持以下几种度量类型：",paraId:1},{value:"identity",paraId:2},{value:"，常量类型的数值，也就是说数据的某个字段是不变的常量；",paraId:2},{value:"linear",paraId:3},{value:"，连续的数字 [1, 2, 3, 4, 5]；",paraId:3},{value:"cat",paraId:4},{value:"，分类, ['男','女']；",paraId:4},{value:"timeCat",paraId:5},{value:"，时间类型；",paraId:5},{value:"在 F2 的使用中，我们可以通过列定义来直接定义度量",paraId:6},{value:"const data = [\n  { a: 'a', b: 20 },\n  { a: 'b', b: 12 },\n  { a: 'c', b: 8 },\n];\n<Canvas>\n  <Chart\n    scale={{\n      a: {\n        type: 'cat', // 声明 a 字段的类型\n      },\n      b: {\n        min: 0, // 手动指定最小值\n        max: 100, // 手动指定最大值\n      },\n    }}\n  ></Chart>\n</Canvas>;\n",paraId:7},{value:"下面列出的是通用的属性：",paraId:8,tocIndex:0},{value:"属性名",paraId:9,tocIndex:0},{value:"类型",paraId:9,tocIndex:0},{value:"说明",paraId:9,tocIndex:0},{value:"type",paraId:9,tocIndex:0},{value:"String",paraId:9,tocIndex:0},{value:"指定不同的度量类型，支持的 type 为 ",paraId:9,tocIndex:0},{value:"identity",paraId:9,tocIndex:0},{value:"、",paraId:9,tocIndex:0},{value:"linear",paraId:9,tocIndex:0},{value:"、",paraId:9,tocIndex:0},{value:"cat",paraId:9,tocIndex:0},{value:"、",paraId:9,tocIndex:0},{value:"timeCat",paraId:9,tocIndex:0},{value:"。",paraId:9,tocIndex:0},{value:"formatter",paraId:9,tocIndex:0},{value:"Function",paraId:9,tocIndex:0},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、提示信息 tooltip 上的显示。",paraId:9,tocIndex:0},{value:"range",paraId:9,tocIndex:0},{value:"Array",paraId:9,tocIndex:0},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:9,tocIndex:0},{value:"alias",paraId:9,tocIndex:0},{value:"String",paraId:9,tocIndex:0},{value:"该数据字段的显示别名，一般用于将字段的英文名称转换成中文名。",paraId:9,tocIndex:0},{value:"tickCount",paraId:9,tocIndex:0},{value:"Number",paraId:9,tocIndex:0},{value:"坐标轴上刻度点的个数，不同的度量类型对应不同的默认值。",paraId:9,tocIndex:0},{value:"ticks",paraId:9,tocIndex:0},{value:"Array",paraId:9,tocIndex:0},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:9,tocIndex:0},{value:"属性名",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"说明",paraId:10,tocIndex:2},{value:"alias",paraId:10,tocIndex:2},{value:"String",paraId:10,tocIndex:2},{value:"别名。",paraId:10,tocIndex:2},{value:"nice",paraId:10,tocIndex:2},{value:"Boolean",paraId:10,tocIndex:2},{value:"默认为 true，用于优化数值范围，使绘制的坐标轴刻度线均匀分布。例如原始数据的范围为 [3, 97]，如果 nice 为 true，那么就会将数值范围调整为 [0, 100]。",paraId:10,tocIndex:2},{value:"min",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"定义数值范围的最小值。",paraId:10,tocIndex:2},{value:"max",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"定义数值范围的最大值。",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:"Array",paraId:10,tocIndex:2},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:10,tocIndex:2},{value:"formatter",paraId:10,tocIndex:2},{value:"Function",paraId:10,tocIndex:2},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示。",paraId:10,tocIndex:2},{value:"ticks",paraId:10,tocIndex:2},{value:"Array",paraId:10,tocIndex:2},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:10,tocIndex:2},{value:"tickCount",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"定义坐标轴刻度线的条数，默认为 5。",paraId:10,tocIndex:2},{value:"tickInterval",paraId:10,tocIndex:2},{value:"Number",paraId:10,tocIndex:2},{value:"用于指定坐标轴各个标度点的间距，是原始数据之间的间距差值，",paraId:10,tocIndex:2},{value:"tickCount 和 tickInterval 不可以同时声明。",paraId:10,tocIndex:2},{value:"属性名",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"说明",paraId:11,tocIndex:3},{value:"alias",paraId:11,tocIndex:3},{value:"String",paraId:11,tocIndex:3},{value:"别名。",paraId:11,tocIndex:3},{value:"range",paraId:11,tocIndex:3},{value:"Array",paraId:11,tocIndex:3},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:11,tocIndex:3},{value:"formatter",paraId:11,tocIndex:3},{value:"Function",paraId:11,tocIndex:3},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示。",paraId:11,tocIndex:3},{value:"ticks",paraId:11,tocIndex:3},{value:"Array",paraId:11,tocIndex:3},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:11,tocIndex:3},{value:"tickCount",paraId:11,tocIndex:3},{value:"Number",paraId:11,tocIndex:3},{value:"定义坐标轴刻度线的条数，默认为 5。",paraId:11,tocIndex:3},{value:"values",paraId:11,tocIndex:3},{value:"Array",paraId:11,tocIndex:3},{value:"具体的分类的值，一般用于指定具体的顺序和枚举的对应关系。",paraId:11,tocIndex:3},{value:"isRounding",paraId:11,tocIndex:3},{value:"Boolean",paraId:11,tocIndex:3},{value:"默认值为 ",paraId:11,tocIndex:3},{value:"false",paraId:11,tocIndex:3},{value:", 在计算 ticks 的时候是否允许取整以满足刻度之间的均匀分布，取整后可能会和用户设置的 tickCount 不符合。",paraId:11,tocIndex:3},{value:"values",paraId:12,tocIndex:3},{value:" 属性常用于 2 个场景：",paraId:12,tocIndex:3},{value:"需要制定分类的顺序时，例如：c 字段有'最大','最小'和'适中'3 种类型，我们想指定这些数值在坐标轴或者图例上的显示顺序时：",paraId:13,tocIndex:3},{value:"const scale = {\n  c: {\n    type: 'cat',\n    values: ['最小', '适中', '最大'],\n  },\n};\n",paraId:14,tocIndex:3},{value:"数据字段中的数据是数值类型，但是需要转换成分类类型，",paraId:15,tocIndex:3},{value:"这个时候需要注意原始数据必须是索引值",paraId:15,tocIndex:3},{value:"。",paraId:15,tocIndex:3},{value:"const data = [\n  { month: 0, tem: 7, city: 'Tokyo' },\n  { month: 1, tem: 6.9, city: 'Tokyo' },\n  { month: 2, tem: 9.5, city: 'Tokyo' },\n  { month: 3, tem: 14.5, city: 'Tokyo' },\n  { month: 4, tem: 18.2, city: 'Tokyo' },\n  { month: 5, tem: 21.5, city: 'Tokyo' },\n  { month: 6, tem: 25.2, city: 'Tokyo' },\n];\nconst scale = {\n  month: {\n    type: 'cat',\n    values: ['一月', '二月', '三月', '四月', '五月', '六月', '七月'], // 这时候 month 的原始值是索引值\n  },\n};\n",paraId:16,tocIndex:3},{value:"时间分类类型，",paraId:17,tocIndex:4},{value:"默认会对数据做排序",paraId:17,tocIndex:4},{value:"。",paraId:17,tocIndex:4},{value:"属性名",paraId:18,tocIndex:4},{value:"类型",paraId:18,tocIndex:4},{value:"说明",paraId:18,tocIndex:4},{value:"nice",paraId:18,tocIndex:4},{value:"Boolean",paraId:18,tocIndex:4},{value:"是否将 ticks 进行优化，变更数据的最小值、最大值，使得每个 tick 都是用户易于理解的数据。",paraId:18,tocIndex:4},{value:"mask",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"数据的格式化格式 默认：'YYYY-MM-DD'。",paraId:18,tocIndex:4},{value:"tickCount",paraId:18,tocIndex:4},{value:"Number",paraId:18,tocIndex:4},{value:"坐标点的个数，默认是 5。但不一定是准确值。",paraId:18,tocIndex:4},{value:"values",paraId:18,tocIndex:4},{value:"Array",paraId:18,tocIndex:4},{value:"具体的分类的值，一般用于指定具体的顺序和枚举的对应关系。",paraId:18,tocIndex:4},{value:"alias",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"别名。",paraId:18,tocIndex:4},{value:"range",paraId:18,tocIndex:4},{value:"Array",paraId:18,tocIndex:4},{value:"输出数据的范围，数值类型的默认值为 [0, 1]，格式为 [min, max]，min 和 max 均为 0 至 1 范围的数据。",paraId:18,tocIndex:4},{value:"formatter",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴 axis、图例 legend、tooltip 上的显示。",paraId:18,tocIndex:4},{value:"ticks",paraId:18,tocIndex:4},{value:"Array",paraId:18,tocIndex:4},{value:"用于指定坐标轴上刻度点的文本信息，当用户设置了 ticks 就会按照 ticks 的个数和文本来显示。",paraId:18,tocIndex:4},{value:"isRounding",paraId:18,tocIndex:4},{value:"Boolean",paraId:18,tocIndex:4},{value:"默认值为 ",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:", 在计算 ticks 的时候是否允许取整以满足刻度之间的均匀分布，取整后可能会和用户设置的 tickCount 不符合。",paraId:18,tocIndex:4},{value:"注意：",paraId:19,tocIndex:4},{value:"mask",paraId:19,tocIndex:4},{value:" 和 ",paraId:19,tocIndex:4},{value:"formatter",paraId:19,tocIndex:4},{value:" 这两个属性不可共用，如果同时设置了，会根据 ",paraId:19,tocIndex:4},{value:"formatter",paraId:19,tocIndex:4},{value:" 进行格式化，",paraId:19,tocIndex:4},{value:"mask",paraId:19,tocIndex:4},{value:" 属性将不生效。",paraId:19,tocIndex:4},{value:"性能小提示：",paraId:20,tocIndex:4},{value:"当图表的数据源已经过排序，可以通过在列定义中设置 ",paraId:21,tocIndex:4},{value:"sortable: false",paraId:21,tocIndex:4},{value:" 来提升性能，默认情况下，会对 timeCat 类型的度量进行数据排序操作。",paraId:21,tocIndex:4},{value:"const scale = {\n  [fieldName]: {\n    type: 'timeCat',\n    sortable: false,\n  },\n};\n",paraId:22,tocIndex:4}]},80523:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(62216);const d=[{value:"F2 底层使用了 ",paraId:0},{value:"G",paraId:0},{value:" 绘图引擎。本篇列出了常见的绘图属性，更多关于绘图以及绘图属性的使用请至 ",paraId:0},{value:"G",paraId:0},{value:" 中查看。",paraId:0},{value:"在 F2 中组件样式的定义全部直接使用 Style 统一的结构，例如 axis 的 label 样式、legend marker 样式、和其他自定义 shape 样式等等。",paraId:1},{value:"对于不同的图形，位置的几何意义也不同，例如：",paraId:2,tocIndex:1},{value:"Circle",paraId:3,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"Arc",paraId:5,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"Sector",paraId:6,tocIndex:1},{value:"为圆心位置，使用 ",paraId:4,tocIndex:1},{value:"cx/cy",paraId:7,tocIndex:1},{value:"Group",paraId:8,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"Rect",paraId:9,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"Image",paraId:10,tocIndex:1},{value:" 为左上角顶点位置，使用 ",paraId:4,tocIndex:1},{value:"x/y",paraId:11,tocIndex:1},{value:"Text",paraId:12,tocIndex:1},{value:" 为文本锚点位置",paraId:4,tocIndex:1},{value:"Line",paraId:13,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"Polyline",paraId:14,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"Polygon",paraId:15,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"Path",paraId:16,tocIndex:1},{value:" 为包围盒左上角顶点位置",paraId:4,tocIndex:1},{value:"属性名",paraId:17,tocIndex:1},{value:"描述",paraId:17,tocIndex:1},{value:"anchor",paraId:17,tocIndex:1},{value:"锚点，默认为 [0, 0]",paraId:17,tocIndex:1},{value:"属性名",paraId:18,tocIndex:2},{value:"描述",paraId:18,tocIndex:2},{value:"| ",paraId:19,tocIndex:2},{value:"zIndex",paraId:19,tocIndex:2},{value:" | 控制图行显示层级。默认 0 |",paraId:19,tocIndex:2},{value:"| ",paraId:20,tocIndex:2},{value:"clip",paraId:20,tocIndex:2},{value:" | 创建元素的可显示区域，区域内的部分显示，区域外的隐藏。参见(./shape-attrs#裁剪) |",paraId:20,tocIndex:2},{value:"| ",paraId:21,tocIndex:2},{value:"visibility",paraId:21,tocIndex:2},{value:" | 控制图形的可见性。参见 [MDN]（",paraId:21,tocIndex:2},{value:"https://developer.mozilla.org/en-US/docs/Web/CSS/visibility）",paraId:21,tocIndex:2},{value:" |",paraId:21,tocIndex:2},{value:"| ",paraId:22,tocIndex:2},{value:"opacity",paraId:22,tocIndex:2},{value:" | 设置图形和图片透明度的属性，默认值是 1。 数值的范围从 0.0 （完全透明）到 1.0 （完全不透明）。 |",paraId:22,tocIndex:2},{value:"| ",paraId:23,tocIndex:2},{value:"fill",paraId:23,tocIndex:2},{value:" | 填充色、",paraId:23,tocIndex:2},{value:"渐变",paraId:24,tocIndex:2},{value:"或",paraId:23,tocIndex:2},{value:"纹理",paraId:25,tocIndex:2},{value:"，默认值为空。 |",paraId:23,tocIndex:2},{value:"| ",paraId:26,tocIndex:2},{value:"fillOpacity",paraId:26,tocIndex:2},{value:" | 用于设置图形填充颜色的透明度，默认值是 1。 |",paraId:26,tocIndex:2},{value:"| ",paraId:27,tocIndex:2},{value:"stroke",paraId:27,tocIndex:2},{value:" | 描边色、",paraId:27,tocIndex:2},{value:"渐变",paraId:28,tocIndex:2},{value:"或",paraId:27,tocIndex:2},{value:"纹理",paraId:29,tocIndex:2},{value:"，默认值为空； |",paraId:27,tocIndex:2},{value:"| ",paraId:30,tocIndex:2},{value:"strokeOpacity",paraId:30,tocIndex:2},{value:" | 用于设置边颜色的透明度，默认值是 1。 |",paraId:30,tocIndex:2},{value:"| ",paraId:31,tocIndex:2},{value:"shadowType",paraId:31,tocIndex:2},{value:" | 描述阴影类型，目前支持 'outer' 外阴影和 'inner' 内阴影 |",paraId:31,tocIndex:2},{value:"| ",paraId:32,tocIndex:2},{value:"shadowColor",paraId:32,tocIndex:2},{value:" | 描述阴影颜色的属性，支持 String，暂不支持渐变或纹理，参见 ",paraId:32,tocIndex:2},{value:"MDN",paraId:32,tocIndex:2},{value:"。 |",paraId:32,tocIndex:2},{value:"| ",paraId:33,tocIndex:2},{value:"shadowBlur",paraId:33,tocIndex:2},{value:" | 描述模糊效果程度的属性； 它既不对应像素值也不受当前转换矩阵的影响。 默认值是 0，参见 ",paraId:33,tocIndex:2},{value:"MDN",paraId:33,tocIndex:2},{value:"。 |",paraId:33,tocIndex:2},{value:"| ",paraId:34,tocIndex:2},{value:"shadowOffsetX",paraId:34,tocIndex:2},{value:" | 描述阴影水平偏移距离的属性，参见 ",paraId:34,tocIndex:2},{value:"MDN",paraId:34,tocIndex:2},{value:"。 |",paraId:34,tocIndex:2},{value:"| ",paraId:35,tocIndex:2},{value:"shadowOffsetY",paraId:35,tocIndex:2},{value:" | 描述阴影垂直偏移距离的属性，参见 ",paraId:35,tocIndex:2},{value:"MDN",paraId:35,tocIndex:2},{value:"。 |",paraId:35,tocIndex:2},{value:"| ",paraId:36,tocIndex:2},{value:"filter",paraId:36,tocIndex:2},{value:" | 滤镜，目前支持单个或多个滤镜叠加,支持 blur、brightness、drop-shadow、contrast、grayscale、saturate、sepia、hue-rotate、invert 几种滤镜效果。参见 [MDN]（",paraId:36,tocIndex:2},{value:"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/filter）",paraId:36,tocIndex:2},{value:" |",paraId:36,tocIndex:2},{value:"| ",paraId:37,tocIndex:2},{value:"cursor",paraId:37,tocIndex:2},{value:" | 鼠标样式。参见 [MDN]（",paraId:37,tocIndex:2},{value:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor）",paraId:37,tocIndex:2},{value:" |",paraId:37,tocIndex:2},{value:"属性名",paraId:38,tocIndex:3},{value:"描述",paraId:38,tocIndex:3},{value:"| ",paraId:39,tocIndex:3},{value:"lineCap",paraId:39,tocIndex:3},{value:" | Canvas 2D API 指定如何绘制每一条线段末端的属性。有 3 个可能的值，分别是：",paraId:39,tocIndex:3},{value:"butt",paraId:39,tocIndex:3},{value:", ",paraId:39,tocIndex:3},{value:"round",paraId:39,tocIndex:3},{value:" and ",paraId:39,tocIndex:3},{value:"square",paraId:39,tocIndex:3},{value:"。默认值是 butt，参见 ",paraId:39,tocIndex:3},{value:"MDN",paraId:39,tocIndex:3},{value:". |",paraId:39,tocIndex:3},{value:"| ",paraId:40,tocIndex:3},{value:"lineJoin",paraId:40,tocIndex:3},{value:" | Canvas 2D API 用来设置 2 个长度不为 0 的相连部分（线段，圆弧，曲线）如何连接在一起的属性（长度为 0 的变形部分，其指定的末端和控制点在同一位置，会被忽略），参见 ",paraId:40,tocIndex:3},{value:"MDN",paraId:40,tocIndex:3},{value:". | | ",paraId:40,tocIndex:3},{value:"lineWidth",paraId:40,tocIndex:3},{value:" | Canvas 2D API 设置线段厚度的属性（即线段的宽度）。当获取属性值时，它可以返回当前的值（默认值是 1.0 ）。 当给属性赋值时， 0、 负数、 Infinity 和 NaN 都会被忽略；除此之外，都会被赋予一个新值，参见 ",paraId:40,tocIndex:3},{value:"MDN",paraId:40,tocIndex:3},{value:". | | ",paraId:40,tocIndex:3},{value:"miterLimit",paraId:40,tocIndex:3},{value:" | Canvas 2D API 设置斜接面限制比例的属性。 当获取属性值时， 会返回当前的值（默认值是 10.0 ）。当给属性赋值时， 0、负数、 Infinity 和 NaN 都会被忽略；除此之外都会被赋予一个新值。，参见 ",paraId:40,tocIndex:3},{value:"MDN",paraId:40,tocIndex:3},{value:". | | ",paraId:40,tocIndex:3},{value:"lineDash",paraId:40,tocIndex:3},{value:" | 设置线的虚线样式，可以指定一个数组。一组描述交替绘制线段和间距（坐标空间单位）长度的数字。 如果数组元素的数量是奇数， 数组的元素会被复制并重复。例如， [5, 15, 25] 会变成 [5, 15, 25, 5, 15, 25]。这个属性取决于浏览器是否支持 ",paraId:40,tocIndex:3},{value:"setLineDash()",paraId:40,tocIndex:3},{value:" 函数，详情参考 ",paraId:40,tocIndex:3},{value:"setLineDash",paraId:40,tocIndex:3},{value:"。 |",paraId:40,tocIndex:3},{value:"属性名",paraId:41,tocIndex:4},{value:"描述",paraId:41,tocIndex:4},{value:"textAlign",paraId:41,tocIndex:4},{value:"设置文本内容的当前对齐方式, 支持的属性：'start', 'center', 'end', 'left', 'right'",paraId:41,tocIndex:4},{value:"textBaseline",paraId:41,tocIndex:4},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性：'top', 'hanging', 'middle', 'alphabetic', 'ideographic', 'bottom'",paraId:41,tocIndex:4},{value:"fontStyle",paraId:41,tocIndex:4},{value:"规定字体样式。可能的值：'normal', 'italic', 'oblique'",paraId:41,tocIndex:4},{value:"fontSize",paraId:41,tocIndex:4},{value:"规定字号，以像素计",paraId:41,tocIndex:4},{value:"fontFamily",paraId:41,tocIndex:4},{value:"规定字体系列",paraId:41,tocIndex:4},{value:"fontWeight",paraId:41,tocIndex:4},{value:"规定字体的粗细。可能的值：'normal', 'bold', 'bolder', 'lighter', '100', '200, '300', '400','500', '600', '700', '800', '900'",paraId:41,tocIndex:4},{value:"fontVariant",paraId:41,tocIndex:4},{value:"规定字体变体。可能的值：'normal', 'small-caps'",paraId:41,tocIndex:4},{value:"lineHeight",paraId:41,tocIndex:4},{value:"规定行高，以像素计",paraId:41,tocIndex:4},{value:"为了方便用户使用，F2 中提供与 css 中用法一致的渐变色使用方法，参见[MDN]（",paraId:42,tocIndex:5},{value:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient），定义方式如下：",paraId:42,tocIndex:5},{value:"在 css 中，渐变通过函数创建，在下面例子中展示了目前支持的渐变效果，包括线性和径向渐变、多个渐变叠加等：",paraId:43,tocIndex:5},{value:"线性渐变指创建一个表示两种或多种颜色延某一方向线性变化。渐变方向在 CSS 中默认为从下到上，而我们为了和 Canvas / SVG 保持一致，使用从左到右，且可以多个渐变叠加。示例：",paraId:44,tocIndex:6},{value:"// example\nfill: 'linear-gradient(0deg, blue, green 40%, red)';\n",paraId:45,tocIndex:6},{value:"径向渐变指从图形中心发出的两种或者多种颜色之间的逐步过渡变化。",paraId:46,tocIndex:7},{value:"// example\nfill: 'radial-gradient(circle at center, red, blue, green 100%)';\n",paraId:47,tocIndex:7},{value:"使用相同的图案填充图形，目前支持的 Pattern 可以是图片 URL，",paraId:48,tocIndex:8},{value:"HTMLImageElement",paraId:48,tocIndex:8},{value:"，",paraId:48,tocIndex:8},{value:"HTMLCanvasElement",paraId:48,tocIndex:8},{value:"，",paraId:48,tocIndex:8},{value:"HTMLVideoElement",paraId:48,tocIndex:8},{value:" 和 ",paraId:48,tocIndex:8},{value:"Rect",paraId:48,tocIndex:8},{value:" 等，还可以指定重复方向：",paraId:48,tocIndex:8},{value:"支持参数如下：",paraId:49,tocIndex:8},{value:"interface Pattern {\n  image: string | CanvasImageSource | Rect;\n  repetition?: 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';\n  transform?: string;\n}\n",paraId:50,tocIndex:8},{value:"使用方法：",paraId:51,tocIndex:8},{value:"// example\n// 使用纹理填充，在水平和垂直方向重复图片\nfill: {\n    image:'https://gw.alipayobjects.com/zos/rmsportal/ibtwzHXSxomqbZCPMLqS.png',\n    repetition: 'repeat',\n    transform: 'rotate(30deg)',\n}\n",paraId:52,tocIndex:8},{value:"参考 ",paraId:53,tocIndex:9},{value:"CSS clip-path",paraId:53,tocIndex:9},{value:"。该属性值可以定义可视区域，可以是任意图形，例如 Circle、Rect 等等。同一个裁剪区域可以被多个图形共享使用，并且裁剪区域也会影响图形的拾取区域。",paraId:53,tocIndex:9},{value:"使用方法：",paraId:54,tocIndex:9},{value:"<rect\n  style={{\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100,\n    clip: {\n      type: 'circle',\n      style: {\n        cx: 100,\n        cy: 100,\n        r: 50,\n      },\n    },\n  }}\n/>\n",paraId:55,tocIndex:9},{value:"历史用法见 ",paraId:56,tocIndex:10},{value:"https://f2-v4.antv.visiondocs/tutorial/shape-attrs#渐变色",paraId:56,tocIndex:10}]},1093:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(83821);const d=[{value:"F2 底层使用了 ",paraId:0},{value:"G",paraId:0},{value:" 绘图引擎。本篇列出了常见的图形标签",paraId:0},{value:"详见：",paraId:1,tocIndex:0},{value:"图形使用",paraId:2,tocIndex:0},{value:"group",paraId:3,tocIndex:1},{value:" 分组\n",paraId:4,tocIndex:1},{value:"rect",paraId:5,tocIndex:1},{value:" 矩形",paraId:6,tocIndex:1},{value:"circle",paraId:7,tocIndex:1},{value:" 圆",paraId:6,tocIndex:1},{value:"sector",paraId:8,tocIndex:1},{value:" 扇形",paraId:6,tocIndex:1},{value:"polygon",paraId:9,tocIndex:1},{value:" 多边形",paraId:6,tocIndex:1},{value:"line",paraId:10,tocIndex:1},{value:" 线",paraId:6,tocIndex:1},{value:"arc",paraId:11,tocIndex:1},{value:" 圆弧",paraId:6,tocIndex:1},{value:"polyline",paraId:12,tocIndex:1},{value:" 多点线段",paraId:6,tocIndex:1},{value:"text",paraId:13,tocIndex:1},{value:" 文本",paraId:6,tocIndex:1},{value:"image",paraId:14,tocIndex:1},{value:" 图片",paraId:6,tocIndex:1},{value:"属性名",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"className",paraId:15,tocIndex:3},{value:"String",paraId:15,tocIndex:3},{value:"对象标记，由用户指定",paraId:15,tocIndex:3},{value:"visible",paraId:15,tocIndex:3},{value:"Boolean",paraId:15,tocIndex:3},{value:"显示还是隐藏。",paraId:15,tocIndex:3},{value:"zIndex",paraId:15,tocIndex:3},{value:"Number",paraId:15,tocIndex:3},{value:"z-index 值，用于调整绘制顺序。",paraId:15,tocIndex:3},{value:"style",paraId:15,tocIndex:3},{value:"Style",paraId:15,tocIndex:3},{value:"图形样式",paraId:15,tocIndex:3},{value:"animation",paraId:15,tocIndex:3},{value:"Animation",paraId:15,tocIndex:3},{value:"图形动画",paraId:15,tocIndex:3},{value:"onPan",paraId:15,tocIndex:3},{value:" 等",paraId:15,tocIndex:3},{value:"Event",paraId:15,tocIndex:3},{value:"图形事件",paraId:15,tocIndex:3},{value:"绘图属性",paraId:16,tocIndex:3},{value:"更多详情可见：",paraId:17,tocIndex:4},{value:"绘图属性",paraId:18,tocIndex:4},{value:"图形动画属性",paraId:19,tocIndex:4},{value:"更多详情可见：",paraId:20,tocIndex:5},{value:"图形动画属性",paraId:21,tocIndex:5},{value:"图形事件属性",paraId:22,tocIndex:5},{value:"更多详情可见：",paraId:23,tocIndex:6},{value:"图形事件属性",paraId:24,tocIndex:6},{value:"图形标签",paraId:25,tocIndex:7},{value:"包含一组图形",paraId:26,tocIndex:8},{value:'<group className="group">\n  <rect ... />\n  <rect ... />\n</group>\n',paraId:27,tocIndex:9},{value:"矩形",paraId:28,tocIndex:10},{value:"属性名",paraId:29,tocIndex:11},{value:"类型",paraId:29,tocIndex:11},{value:"描述",paraId:29,tocIndex:11},{value:"x",paraId:29,tocIndex:11},{value:"Number",paraId:29,tocIndex:11},{value:"左上角 x 坐标",paraId:29,tocIndex:11},{value:"y",paraId:29,tocIndex:11},{value:"Number",paraId:29,tocIndex:11},{value:"左上角 y 坐标",paraId:29,tocIndex:11},{value:"width",paraId:29,tocIndex:11},{value:"Number",paraId:29,tocIndex:11},{value:"宽度",paraId:29,tocIndex:11},{value:"height",paraId:29,tocIndex:11},{value:"Number",paraId:29,tocIndex:11},{value:"高度",paraId:29,tocIndex:11},{value:"radius",paraId:29,tocIndex:11},{value:"Number | Number[]",paraId:29,tocIndex:11},{value:"圆角",paraId:29,tocIndex:11},{value:"<rect\n  style={{ x: 100, y: 100, width: 50, height: 50, lineWidth: '2px', stroke: '#000', fill: 'red' }}\n/>\n",paraId:30,tocIndex:12},{value:"圆形",paraId:31,tocIndex:13},{value:"属性名",paraId:32,tocIndex:14},{value:"类型",paraId:32,tocIndex:14},{value:"描述",paraId:32,tocIndex:14},{value:"cx",paraId:32,tocIndex:14},{value:"Number",paraId:32,tocIndex:14},{value:"圆心 cx 坐标",paraId:32,tocIndex:14},{value:"cy",paraId:32,tocIndex:14},{value:"Number",paraId:32,tocIndex:14},{value:"圆心 cy 坐标",paraId:32,tocIndex:14},{value:"r",paraId:32,tocIndex:14},{value:"Number",paraId:32,tocIndex:14},{value:"圆的半径",paraId:32,tocIndex:14},{value:"<circle style={{ cx: 100, cy: 100, r: 50, lineWidth: '2px', stroke: '#000', fill: 'red' }} />\n",paraId:33,tocIndex:15},{value:"扇形",paraId:34,tocIndex:16},{value:"属性名",paraId:35,tocIndex:17},{value:"类型",paraId:35,tocIndex:17},{value:"描述",paraId:35,tocIndex:17},{value:"cx",paraId:35,tocIndex:17},{value:"Number",paraId:35,tocIndex:17},{value:"圆心 cx 坐标",paraId:35,tocIndex:17},{value:"cy",paraId:35,tocIndex:17},{value:"Number",paraId:35,tocIndex:17},{value:"圆心 cy 坐标",paraId:35,tocIndex:17},{value:"r",paraId:35,tocIndex:17},{value:"Number",paraId:35,tocIndex:17},{value:"外半径",paraId:35,tocIndex:17},{value:"r0",paraId:35,tocIndex:17},{value:"Number",paraId:35,tocIndex:17},{value:"内半径， 默认为 0",paraId:35,tocIndex:17},{value:"startAngle",paraId:35,tocIndex:17},{value:"Number | String",paraId:35,tocIndex:17},{value:"起始角度/弧度， 默认 0",paraId:35,tocIndex:17},{value:"endAngle",paraId:35,tocIndex:17},{value:"Number | String",paraId:35,tocIndex:17},{value:"结束角度/弧度，默认 0",paraId:35,tocIndex:17},{value:"anticlockwise",paraId:35,tocIndex:17},{value:"Boolean",paraId:35,tocIndex:17},{value:"逆时针方向，默认 false",paraId:35,tocIndex:17},{value:"<sector\n  style={{\n    cx: 100,\n    cy: 100,\n    r: 50,\n    startAngle: '0 rad',\n    endAngle: '3.14 rad',\n    lineWidth: '2px',\n    stroke: '#000',\n    fill: 'red',\n  }}\n/>\n",paraId:36,tocIndex:18},{value:"多边形",paraId:37,tocIndex:19},{value:"属性名",paraId:38,tocIndex:20},{value:"类型",paraId:38,tocIndex:20},{value:"描述",paraId:38,tocIndex:20},{value:"points",paraId:38,tocIndex:20},{value:"[Number, Number][]",paraId:38,tocIndex:20},{value:"多边形的点",paraId:38,tocIndex:20},{value:"<polygon\n  style={{\n    points: [\n      [10, 10],\n      [50, 50],\n      [30, 70],\n    ],\n    lineWidth: '2px',\n    stroke: '#000',\n    fill: 'red',\n  }}\n/>\n",paraId:39,tocIndex:21},{value:"绘制直线",paraId:40,tocIndex:22},{value:"属性名",paraId:41,tocIndex:23},{value:"类型",paraId:41,tocIndex:23},{value:"描述",paraId:41,tocIndex:23},{value:"x1",paraId:41,tocIndex:23},{value:"Number",paraId:41,tocIndex:23},{value:"起始点 x 坐标",paraId:41,tocIndex:23},{value:"y1",paraId:41,tocIndex:23},{value:"Number",paraId:41,tocIndex:23},{value:"起始点 y 坐标",paraId:41,tocIndex:23},{value:"x2",paraId:41,tocIndex:23},{value:"Number",paraId:41,tocIndex:23},{value:"结束点 x 坐标",paraId:41,tocIndex:23},{value:"y2",paraId:41,tocIndex:23},{value:"Number",paraId:41,tocIndex:23},{value:"结束点 y 坐标",paraId:41,tocIndex:23},{value:"<line style={{ x1: 10, y1: 10, x2: 100, y2: 100, lineWidth: '2px', stroke: '#000' }} />\n",paraId:42,tocIndex:24},{value:"绘制圆弧",paraId:43,tocIndex:25},{value:"属性名",paraId:44,tocIndex:26},{value:"类型",paraId:44,tocIndex:26},{value:"描述",paraId:44,tocIndex:26},{value:"cx",paraId:44,tocIndex:26},{value:"Number",paraId:44,tocIndex:26},{value:"圆心 cx 坐标",paraId:44,tocIndex:26},{value:"cy",paraId:44,tocIndex:26},{value:"Number",paraId:44,tocIndex:26},{value:"圆心 cy 坐标",paraId:44,tocIndex:26},{value:"r",paraId:44,tocIndex:26},{value:"Number",paraId:44,tocIndex:26},{value:"半径",paraId:44,tocIndex:26},{value:"startAngle",paraId:44,tocIndex:26},{value:"Number/String",paraId:44,tocIndex:26},{value:"起始角度/弧度， 默认 0",paraId:44,tocIndex:26},{value:"endAngle",paraId:44,tocIndex:26},{value:"Number/String",paraId:44,tocIndex:26},{value:"结束角度/弧度，默认 0",paraId:44,tocIndex:26},{value:"anticlockwise",paraId:44,tocIndex:26},{value:"Boolean",paraId:44,tocIndex:26},{value:"逆时针方向，默认 false",paraId:44,tocIndex:26},{value:"<arc\n  style={{\n    cx: 100,\n    cy: 100,\n    r: 50,\n    startAngle: 0,\n    endAngle: 360,\n    lineWidth: '2px',\n    stroke: '#000',\n  }}\n/>\n",paraId:45,tocIndex:27},{value:"多点线段",paraId:46,tocIndex:28},{value:"属性名",paraId:47,tocIndex:29},{value:"类型",paraId:47,tocIndex:29},{value:"描述",paraId:47,tocIndex:29},{value:"Points",paraId:47,tocIndex:29},{value:"[Number, Number][]",paraId:47,tocIndex:29},{value:"线段的点",paraId:47,tocIndex:29},{value:"smooth",paraId:47,tocIndex:29},{value:"Boolean",paraId:47,tocIndex:29},{value:"是否需要平滑，默认 false",paraId:47,tocIndex:29},{value:"<polyline\n  style={{\n    points: [\n      [10, 10],\n      [50, 50],\n      [80, 70],\n    ],\n    lineWidth: '2px',\n    stroke: '#000',\n    smooth: true,\n  }}\n/>\n",paraId:48,tocIndex:30},{value:"文本",paraId:49,tocIndex:31},{value:"属性名",paraId:50,tocIndex:32},{value:"类型",paraId:50,tocIndex:32},{value:"描述",paraId:50,tocIndex:32},{value:"x",paraId:50,tocIndex:32},{value:"Number",paraId:50,tocIndex:32},{value:"文本位置",paraId:50,tocIndex:32},{value:"y",paraId:50,tocIndex:32},{value:"Number",paraId:50,tocIndex:32},{value:"文本位置",paraId:50,tocIndex:32},{value:"text",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"文本内容",paraId:50,tocIndex:32},{value:"textAlign",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"设置文本内容的当前对齐方式, 支持的属性：'start', 'center', 'end', 'left', 'right'",paraId:50,tocIndex:32},{value:"textBaseline",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性：'top', 'hanging', 'middle', 'alphabetic', 'ideographic', 'bottom'",paraId:50,tocIndex:32},{value:"fontStyle",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"规定字体样式。可能的值：'normal', 'italic', 'oblique'",paraId:50,tocIndex:32},{value:"fontSize",paraId:50,tocIndex:32},{value:"Number",paraId:50,tocIndex:32},{value:"规定字号，以像素计",paraId:50,tocIndex:32},{value:"fontFamily",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"规定字体系列",paraId:50,tocIndex:32},{value:"fontWeight",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"规定字体的粗细。可能的值：'normal', 'bold', 'bolder', 'lighter', '100', '200, '300', '400','500', '600', '700', '800', '900'",paraId:50,tocIndex:32},{value:"fontVariant",paraId:50,tocIndex:32},{value:"String",paraId:50,tocIndex:32},{value:"规定字体变体。可能的值：'normal', 'small-caps'",paraId:50,tocIndex:32},{value:"lineHeight",paraId:50,tocIndex:32},{value:"Number",paraId:50,tocIndex:32},{value:"规定行高，以像素计",paraId:50,tocIndex:32},{value:"<text\n  style={{\n    text: '文本',\n    fontSize: 20,\n    fill: '#000',\n  }}\n/>\n",paraId:51,tocIndex:33},{value:"图片",paraId:52,tocIndex:34},{value:"属性名",paraId:53,tocIndex:35},{value:"类型",paraId:53,tocIndex:35},{value:"描述",paraId:53,tocIndex:35},{value:"x",paraId:53,tocIndex:35},{value:"Number",paraId:53,tocIndex:35},{value:"左上角 x 坐标",paraId:53,tocIndex:35},{value:"y",paraId:53,tocIndex:35},{value:"Number",paraId:53,tocIndex:35},{value:"左上角 y 坐标",paraId:53,tocIndex:35},{value:"width",paraId:53,tocIndex:35},{value:"Number",paraId:53,tocIndex:35},{value:"宽度",paraId:53,tocIndex:35},{value:"height",paraId:53,tocIndex:35},{value:"Number",paraId:53,tocIndex:35},{value:"高度",paraId:53,tocIndex:35},{value:"src",paraId:53,tocIndex:35},{value:"string",paraId:53,tocIndex:35},{value:"图片 url",paraId:53,tocIndex:35},{value:"cacheImage",paraId:53,tocIndex:35},{value:"boolean",paraId:53,tocIndex:35},{value:"是否需要缓存(如果图片有闪动，可以添加缓存)",paraId:53,tocIndex:35},{value:"<image\n  style={{\n    src: 'https://f2.antv.vision/favicon-32x32.png?v=9772447a8d07a8fe19894b5176c6cb0d',\n    x: 10,\n    y: 10,\n    width: 32,\n    height: 32,\n  }}\n/>\n",paraId:54,tocIndex:36}]},74452:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(65250);const d=[{value:"为了更好得使用 F2 进行数据可视化，我们需要了解 F2 图表的组成以及相关术语。",paraId:0},{value:"一般情况下，F2 的图表包含坐标轴（Axis）、几何标记（Geometry）、提示信息（Tooltip）、图例（Legend）等，另外还可以包括辅助标记（Guide）、数据标签（dataLabels）等。",paraId:1,tocIndex:0},{value:"F2 基本组成部分如下图所示：",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"术语",paraId:4,tocIndex:1},{value:"英文",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"坐标轴",paraId:4,tocIndex:1},{value:"Axis",paraId:4,tocIndex:1},{value:"每个图表通常包含两个坐标轴，在直角坐标系（笛卡尔坐标系）下，分别为 x 轴和 y 轴，在极坐标轴下，则分别由角度和半径 2 个维度构成。每个坐标轴由坐标轴线（line）、刻度线（tickLine）、刻度文本（label）以及网格线（grid）组成。",paraId:4,tocIndex:1},{value:"图例",paraId:4,tocIndex:1},{value:"Legend",paraId:4,tocIndex:1},{value:"图例作为图表的辅助元素，用于标定不同的数据类型以及数据的范围，用于辅助阅读图表以及帮助用户在图表中进行数据的筛选过滤。",paraId:4,tocIndex:1},{value:"几何标记",paraId:4,tocIndex:1},{value:"Geometry",paraId:4,tocIndex:1},{value:"即我们所说的点、线、面这些几何图形，在图形语法 中几何标记的类型决定了生成图表的类型。也就是数据被可视化后的实际表现，不同的几何标记都包含对应的图形属性。",paraId:4,tocIndex:1},{value:"图形属性",paraId:4,tocIndex:1},{value:"Attribute",paraId:4,tocIndex:1},{value:"图形属性对应视觉编码中的视觉通道，是图形语法元素非常重要和灵活的一部分，不同的几何标记拥有自己的图形属性，F2 提供了位置（position）、颜色（color）、大小（size）、形状（shape）这四种图形属性。",paraId:4,tocIndex:1},{value:"坐标系",paraId:4,tocIndex:1},{value:"Coordinate",paraId:4,tocIndex:1},{value:"坐标系是将两种位置标度结合在一起组成的 2 维定位系统，描述了数据是如何映射到图形所在的平面。",paraId:4,tocIndex:1},{value:"提示信息",paraId:4,tocIndex:1},{value:"Tooltip",paraId:4,tocIndex:1},{value:"当鼠标悬停在某个点上时，会以提示框的形式显示当前点对应的数据的信息，比如该点的值，数据单位等，帮助用户从图表中获取具体的数据信息。",paraId:4,tocIndex:1},{value:"辅助标记",paraId:4,tocIndex:1},{value:"Guide",paraId:4,tocIndex:1},{value:"当需要在图表上绘制一些辅助线、辅助框或者文本时，比如增加预警线、最高值线或者标示明显的范围区域时，辅助标记 Guide 是非常有用的工具。",paraId:4,tocIndex:1}]}}]);