"use strict";(self.webpackChunk_antv_f2_site=self.webpackChunk_antv_f2_site||[]).push([[1904],{28068:function(a,n,e){e.r(n),e.d(n,{demos:function(){return d}});e(60736),e(90464);var d={}},52153:function(a,n,e){e.r(n),e.d(n,{demos:function(){return d}});e(60736),e(64330);var d={}},96137:function(a,n,e){e.r(n),e.d(n,{demos:function(){return d}});e(60736),e(48993);var d={}},16276:function(a,n,e){e.r(n),e.d(n,{texts:function(){return d}});e(90464);const d=[{value:"旭日图是一种用于展示层级数据的径向图表，通过同心圆的形式展示数据的层级结构。每一层圆环代表数据的一个层级，扇形的大小表示数据的数值，适合展示具有层级关系的数据结构。",paraId:0},{value:"import { jsx, Canvas, Sunburst } from '@antv/f2';\n\nconst data = {\n  name: 'flare',\n  children: [\n    {\n      name: 'analytics',\n      children: [\n        {\n          name: 'cluster',\n          children: [\n            { name: 'AgglomerativeCluster', value: 3938 },\n            { name: 'CommunityStructure', value: 3812 },\n            { name: 'HierarchicalCluster', value: 6714 },\n            { name: 'MergeEdge', value: 743 },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst colors = [\n  'rgb(110, 64, 170)',\n  'rgb(191, 60, 175)',\n  'rgb(254, 75, 131)',\n  'rgb(255, 120, 71)',\n  'rgb(226, 183, 47)',\n  'rgb(175, 240, 91)',\n  'rgb(82, 246, 103)',\n  'rgb(29, 223, 163)',\n  'rgb(35, 171, 216)',\n  'rgb(76, 110, 219)',\n];\n\nconst { props } = (\n  <Canvas context={context} pixelRatio={1}>\n    <Sunburst\n      data={data.children}\n      coord={{\n        type: 'polar',\n      }}\n      color={{\n        field: 'name',\n        range: colors,\n      }}\n      value=\"value\"\n    />\n  </Canvas>\n);\n",paraId:1,tocIndex:0},{value:"属性名",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"data",paraId:2,tocIndex:1},{value:"Array",paraId:2,tocIndex:1},{value:"数据源，必须是具有层级结构的数组",paraId:2,tocIndex:1},{value:"coord",paraId:2,tocIndex:1},{value:"CoordProps",paraId:2,tocIndex:1},{value:"坐标系配置，旭日图通常使用极坐标系 ",paraId:2,tocIndex:1},{value:"polar",paraId:2,tocIndex:1},{value:"color",paraId:2,tocIndex:1},{value:"ColorAttrObject | any[]",paraId:2,tocIndex:1},{value:"颜色映射配置，可以是颜色数组或包含字段映射的对象",paraId:2,tocIndex:1},{value:"value",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"用于确定扇形大小的数值字段名",paraId:2,tocIndex:1},{value:"sort",paraId:2,tocIndex:1},{value:"boolean | Function",paraId:2,tocIndex:1},{value:"是否对数据进行排序，默认为 ",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"，按数值大小降序排列",paraId:2,tocIndex:1},{value:"onClick",paraId:2,tocIndex:1},{value:"Function",paraId:2,tocIndex:1},{value:"点击事件回调函数",paraId:2,tocIndex:1},{value:"属性名",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"field",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:"用于颜色映射的字段名",paraId:3,tocIndex:2},{value:"range",paraId:3,tocIndex:2},{value:"any[]",paraId:3,tocIndex:2},{value:"颜色范围数组",paraId:3,tocIndex:2},{value:"callback",paraId:3,tocIndex:2},{value:"(value) => any",paraId:3,tocIndex:2},{value:"自定义颜色映射函数",paraId:3,tocIndex:2},{value:"旭日图需要具有层级结构的数据，示例如下：",paraId:4,tocIndex:3},{value:"const data = {\n  name: 'flare',\n  children: [\n    {\n      name: 'analytics',\n      children: [\n        {\n          name: 'cluster',\n          children: [\n            { name: 'AgglomerativeCluster', value: 3938 },\n            { name: 'CommunityStructure', value: 3812 },\n            { name: 'HierarchicalCluster', value: 6714 },\n            { name: 'MergeEdge', value: 743 },\n          ],\n        },\n        // 更多数据...\n      ],\n    },\n    // 更多数据...\n  ],\n};\n",paraId:5,tocIndex:3}]},93607:function(a,n,e){e.r(n),e.d(n,{texts:function(){return d}});e(64330);const d=[{value:"矩形树图是一种用于展示层级数据的可视化图表，通过矩形的大小和颜色来表示数据的数值和分类。它将数据按照层级结构进行分割，每个矩形代表一个数据项，矩形的面积与数据的数值成正比。",paraId:0},{value:"import { jsx, Canvas, Treemap } from '@antv/f2';\n\nconst data = [\n  {\n    name: '贵州茅台',\n    value: 0.16,\n    rate: 0.1,\n  },\n  {\n    name: '贵州茅台1',\n    value: 0.1,\n    rate: -0.1,\n  },\n  {\n    name: '五粮液',\n    value: 0.13,\n    rate: -0.1,\n  },\n  {\n    name: '五粮液',\n    value: 0.12,\n    rate: -0.01,\n  },\n  {\n    name: '招商银行',\n    value: 0.15,\n    rate: 0,\n  },\n  {\n    name: '招商银行',\n    value: 0.08,\n    rate: 0,\n  },\n  {\n    name: '中国平安',\n    value: 0.07,\n    rate: 0.1,\n  },\n  {\n    name: '中国平安',\n    value: 0.06,\n    rate: 0.1,\n  },\n  {\n    name: '同花顺',\n    value: 0.1,\n    rate: 0,\n  },\n  {\n    name: '同花顺',\n    value: 0.03,\n    rate: 0,\n  },\n];\n\nconst { props } = (\n  <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n    <Treemap\n      data={data}\n      color={{\n        field: 'name',\n      }}\n      value=\"value\"\n      space={4}\n      label={true}\n      onClick={(record) => {\n        console.log('点击了:', record.origin);\n      }}\n      selection={{\n        triggerOn: 'click',\n        selectedStyle: {\n          fillOpacity: 1,\n        },\n        unSelectedStyle: {\n          fillOpacity: 0.4,\n        },\n      }}\n    />\n  </Canvas>\n);\n",paraId:1,tocIndex:1},{value:"属性名",paraId:2,tocIndex:2},{value:"类型",paraId:2,tocIndex:2},{value:"描述",paraId:2,tocIndex:2},{value:"data",paraId:2,tocIndex:2},{value:"Array",paraId:2,tocIndex:2},{value:"数据源，必须是具有层级结构的数组",paraId:2,tocIndex:2},{value:"value",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"用于确定矩形大小的数值字段名",paraId:2,tocIndex:2},{value:"coord",paraId:2,tocIndex:2},{value:"CoordProps",paraId:2,tocIndex:2},{value:"坐标系配置",paraId:2,tocIndex:2},{value:"color",paraId:2,tocIndex:2},{value:"ColorAttrObject",paraId:2,tocIndex:2},{value:"颜色映射配置",paraId:2,tocIndex:2},{value:"space",paraId:2,tocIndex:2},{value:"number",paraId:2,tocIndex:2},{value:"矩形之间的间距，默认为 0",paraId:2,tocIndex:2},{value:"theme",paraId:2,tocIndex:2},{value:"Record<string, any>",paraId:2,tocIndex:2},{value:"主题配置",paraId:2,tocIndex:2},{value:"nodes",paraId:2,tocIndex:2},{value:"RecordNode[]",paraId:2,tocIndex:2},{value:"节点数据",paraId:2,tocIndex:2},{value:"selection",paraId:2,tocIndex:2},{value:"any",paraId:2,tocIndex:2},{value:"选择配置",paraId:2,tocIndex:2},{value:"label",paraId:2,tocIndex:2},{value:"boolean | TextStyleProps",paraId:2,tocIndex:2},{value:"是否显示标签，默认为 ",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"onClick",paraId:2,tocIndex:2},{value:"(record: RecordNode) => void",paraId:2,tocIndex:2},{value:"点击事件回调函数",paraId:2,tocIndex:2},{value:"属性名",paraId:3,tocIndex:3},{value:"类型",paraId:3,tocIndex:3},{value:"描述",paraId:3,tocIndex:3},{value:"field",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"用于颜色映射的字段名",paraId:3,tocIndex:3},{value:"range",paraId:3,tocIndex:3},{value:"string[] | number[]",paraId:3,tocIndex:3},{value:"颜色范围数组",paraId:3,tocIndex:3},{value:"callback",paraId:3,tocIndex:3},{value:"(value) => string | number",paraId:3,tocIndex:3},{value:"自定义颜色映射函数",paraId:3,tocIndex:3},{value:"属性名",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"triggerOn",paraId:4,tocIndex:4},{value:"string",paraId:4,tocIndex:4},{value:"触发选择的事件类型，如 'click'",paraId:4,tocIndex:4},{value:"type",paraId:4,tocIndex:4},{value:"'single' | 'multiple'",paraId:4,tocIndex:4},{value:"选择类型，默认为 'single'",paraId:4,tocIndex:4},{value:"cancelable",paraId:4,tocIndex:4},{value:"boolean",paraId:4,tocIndex:4},{value:"是否允许取消选择，默认为 ",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:"defaultSelected",paraId:4,tocIndex:4},{value:"any[]",paraId:4,tocIndex:4},{value:"默认选中的数据项",paraId:4,tocIndex:4},{value:"selectedStyle",paraId:4,tocIndex:4},{value:"object | Function",paraId:4,tocIndex:4},{value:"选中项的样式",paraId:4,tocIndex:4},{value:"unSelectedStyle",paraId:4,tocIndex:4},{value:"object | Function",paraId:4,tocIndex:4},{value:"未选中项的样式",paraId:4,tocIndex:4},{value:"矩形树图需要具有层级结构的数据，示例如下：",paraId:5,tocIndex:5},{value:"const data = [\n  {\n    name: '贵州茅台',\n    value: 0.16,\n    rate: 0.1,\n  },\n  {\n    name: '五粮液',\n    value: 0.13,\n    rate: -0.1,\n  },\n  {\n    name: '招商银行',\n    value: 0.15,\n    rate: 0,\n  },\n  // 更多数据...\n];\n",paraId:6,tocIndex:5},{value:"矩形树图适用于以下场景：",paraId:7,tocIndex:6},{value:"文件系统目录结构展示",paraId:8,tocIndex:6},{value:"组织架构的可视化",paraId:8,tocIndex:6},{value:"分类数据的层级展示",paraId:8,tocIndex:6},{value:"预算分配和资源分布分析",paraId:8,tocIndex:6},{value:"股票市值分布展示",paraId:8,tocIndex:6},{value:"网站流量分析",paraId:8,tocIndex:6}]},10820:function(a,n,e){e.r(n),e.d(n,{texts:function(){return d}});e(48993);const d=[{value:"在 F2 中， 为了让显示更加灵活和自定义，我们把所有的组件都进行了高阶组件（HOC）的封装，形成了 ",paraId:0},{value:"withXXX",paraId:0},{value:" 的逻辑封装，下面以 ",paraId:0},{value:"Legend",paraId:0},{value:" 为例，来演示下如何实现自定义 view",paraId:0},{value:"import { Canvas, Chart, Legend } from '@antv/f2';\n\n<Canvas context={context}>\n  <Chart data={data}>\n    ...\n    <Legend position=\"top\" />\n    ...\n  </Chart>\n</Canvas>;\n",paraId:1,tocIndex:0},{value:"上面这个使用大家应该都不陌生，但是除了 ",paraId:2,tocIndex:0},{value:"Legend",paraId:2,tocIndex:0},{value:" 之外，还是有 ",paraId:2,tocIndex:0},{value:"withLegend",paraId:2,tocIndex:0},{value:" 和 ",paraId:2,tocIndex:0},{value:"LegendView",paraId:2,tocIndex:0},{value:" 这 2 个对象，而 ",paraId:2,tocIndex:0},{value:"Legend = withLegend(LegendView)",paraId:2,tocIndex:0},{value:", 所以我们只要定义自己的 ",paraId:2,tocIndex:0},{value:"LegendView",paraId:2,tocIndex:0},{value:" 就能达到自定义 View 的效果",paraId:2,tocIndex:0},{value:"const CustomLegendView = (props) => {\n  const { items } = props;\n  return (\n    <group\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {items.map((item) => {\n        const { name, color } = item;\n        return (\n          <text\n            style={{\n              text: name,\n              fill: color,\n            }}\n          />\n        );\n      })}\n    </group>\n  );\n};\n",paraId:3,tocIndex:1},{value:"import { Canvas, Chart, withLegend } from '@antv/f2';\n\n// 自定义 View\nconst CustomLegendView = (props) => {\n  const { items } = props;\n  return (\n    <group\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {items.map((item) => {\n        const { name, color } = item;\n        return (\n          <text\n            style={{\n              text: name,\n              fill: color,\n            }}\n          />\n        );\n      })}\n    </group>\n  );\n};\n\n// 使用自定义 view 的组件\nconst Legend = withLegend(CustomLegendView);\n\n<Canvas context={context}>\n  <Chart data={data}>\n    ...\n    <Legend position=\"top\" />\n    ...\n  </Chart>\n</Canvas>;\n",paraId:4,tocIndex:2},{value:"在 CustomLegendView 中，用户可以拿到计算逻辑后的结果 props，也可以使用 Legend 组件的 public function",paraId:5,tocIndex:2},{value:"自定义 Legend",paraId:6,tocIndex:3}]}}]);